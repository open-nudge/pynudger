{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pynudger","text":""},{"location":"#features","title":"Features","text":"<p>pynudger is an opinionated linter for Python projects, focused on naming conventions and making your code \"more Pythonic\".</p> <ul> <li>Length rules: Too long class/function names are flagged.</li> <li>Setters/getters: Discourages usage of setters/getters,     encourages properties instead.</li> <li>No helpers/utils/commons: Incentivizes more descriptive     and semantically coherent names for functionalities.</li> </ul>"},{"location":"#table-of-contents","title":"Table of contents","text":"<ul> <li>Quick start<ul> <li>Installation</li> <li>Usage</li> </ul> </li> <li>Advanced<ul> <li>Configuration</li> <li>Run as a pre-commit hook</li> <li>Disable in code</li> <li>Rules</li> </ul> </li> </ul>"},{"location":"#quick-start","title":"Quick start","text":""},{"location":"#installation","title":"Installation","text":"<p>Tip</p> <p>You can use your favorite package manager like <code>uv</code>\u00a0\u29c9, <code>hatch</code>\u00a0\u29c9 or <code>pdm</code>\u00a0\u29c9 instead of <code>pip</code>.</p> <pre><code>&gt; pip install pynudger\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To check against the rules run the following from the command line:</p> <pre><code>&gt; pynudger check\n</code></pre> <p>You can pass additional arguments to <code>pynudger check</code>, like files to check (by default all Python files in the current directory):</p> <pre><code>&gt; pynudger check path/to/file.py another_file.py\n</code></pre>"},{"location":"#advanced","title":"Advanced","text":""},{"location":"#configuration","title":"Configuration","text":"<p>You can configure pynudger in <code>pyproject.toml</code> (or <code>.pynudger.toml</code> in the root of your project, just remove the <code>[tool.pynudger]</code> section), for example:</p> <pre><code>[tool.pynudger]\n# include rules by their code\ninclude_codes = [1, 2, 5] # default: all rules included\n# exclude rules by their code (takes precedence over include)\nexclude_codes = [4, 5, 6] # default: no rules excluded\n# whether to exit after first error or all errors\nend_mode = \"first\" # default: \"all\"\n</code></pre> <p>Tip</p> <p>Rule-specific configuration can be found in the section below.</p>"},{"location":"#run-as-a-pre-commit-hook","title":"Run as a pre-commit hook","text":"<p><code>pynudger</code> can be used as a pre-commit hook, to add as a plugin:</p> <pre><code>repos:\n-   repo: \"https://github.com/open-nudge/pynudger\"\n    rev: ...  # select the tag or revision you want, or run `pre-commit autoupdate`\n    hooks:\n    -   id: \"pynudger\"\n</code></pre>"},{"location":"#disable-in-code","title":"Disable in code","text":"<p>You can disable <code>pynudger</code> on a line-by-line basis (you have to specify exact code), e.g.:</p> <pre><code>def set_my_too_long_function_name():  # noqa: PYNUDGER0, PYNUDGER16\n    pass\n</code></pre> <p>or a line span:</p> <pre><code># noqa-start: PYNUDGER0, PYNUDGER16\ndef set_my_too_long_function_name():\n    pass\n\ndef set_another_long_function():\n    pass\n# noqa-end: PYNUDGER0, PYNUDGER16\n\ndef set_will_error_out_this_time():\n    pass\n</code></pre> <p>It is also possible to disable all checks in a file by placing the following somewhere in the file (preferably at the top):</p> <pre><code># noqa-file: PYNUDGER0, PYNUDGER16\n</code></pre> <p>Note</p> <p>If you are running <code>pynudger</code> with <code>ruff</code>\u00a0\u29c9 you should add <code>lint.external = [\"PYNUDGER\"]</code> to <code>[tool.ruff]</code> section in <code>pyproject.toml</code> to avoid removing <code># noqa: PYNUDGER</code> comments.</p>"},{"location":"#rules","title":"Rules","text":"<p>Tip</p> <p>Run <code>pynudger rules</code> to see the list of available rules.</p> <p><code>pynudger</code> provides the following rules:</p> Name Description <code>PYNUDGER0</code> Avoid using setters in class names. Use properties instead. <code>PYNUDGER1</code> Avoid using setters in function names. Use properties instead. <code>PYNUDGER2</code> Avoid using setters in file names. Define file name without it. <code>PYNUDGER3</code> Avoid using getters in class names. Use properties instead. <code>PYNUDGER4</code> Avoid using getters in function names. Use properties instead. <code>PYNUDGER5</code> Avoid using getters in file names. Define file name without it. <code>PYNUDGER6</code> Avoid using utils in class names. Name the class appropriately. <code>PYNUDGER7</code> Avoid using utils in function names. Name the function appropriately. <code>PYNUDGER8</code> Avoid defining utils modules. Move functionality to appropriate modules. <code>PYNUDGER9</code> Avoid using helpers in class names. Name the class appropriately. <code>PYNUDGER10</code> Avoid using helpers in function names. Name the function appropriately. <code>PYNUDGER11</code> Avoid defining utils modules. Move functionality to appropriate modules. <code>PYNUDGER12</code> Avoid using common in class names. Name the class appropriately. <code>PYNUDGER13</code> Avoid using common in function names. Name the function appropriately. <code>PYNUDGER14</code> Avoid defining common modules. Move functionality to appropriate modules. <code>PYNUDGER15</code> Avoid long class names. Specify intent by nesting modules/packages. <code>PYNUDGER16</code> Avoid long function names. Specify intent by nesting modules/packages. <code>PYNUDGER17</code> Avoid long path names. Specify intent by nesting modules/packages. <p>with the following configurable options (in <code>pyproject.toml</code> or <code>.pynudger.toml</code>):</p> Option Description Affected rules Default <code>pascal_length</code> Maximum allowed length of PascalCase names PYNUDGER15 3 <code>snake_length</code> Maximum allowed length of snake_case names PYNUDGER16, PYNUDGER17 3 <code>pascal_excludes</code> List of words to exclude from PascalCase length check PYNUDGER15 [] <code>snake_excludes</code> List of words to exclude from snake_case length check PYNUDGER16, PYNUDGER17 []"},{"location":"#contribute","title":"Contribute","text":""},{"location":"ADOPTERS/","title":"Adopters of pynudger","text":"<p>This page lists organizations, companies and projects using pynudger.</p> <p>Important</p> <p>If you are using pynudger and want to be featured here, open a new issue using adopters template\u00a0\u29c9.</p>"},{"location":"ADOPTERS/#organizations","title":"Organizations","text":""},{"location":"ADOPTERS/#companies","title":"Companies","text":""},{"location":"ADOPTERS/#projects","title":"Projects","text":""},{"location":"ANNOUNCEMENTS/","title":"Announcements","text":""},{"location":"CHANGELOG/","title":"Changelog","text":"<p>See releases\u00a0\u29c9 for detailed changelog.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socioeconomic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,     and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall     community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of     any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,     without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a     professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at open-nudge. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant\u00a0\u29c9, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\u00a0\u29c9.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder\u00a0\u29c9.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq\u00a0\u29c9. Translations are available at https://www.contributor-covenant.org/translations\u00a0\u29c9.</p>"},{"location":"CONTRIBUTING/","title":"Contributing guide","text":""},{"location":"CONTRIBUTING/#table-of-contents","title":"Table of contents","text":"<ul> <li>General</li> <li>Non-code contributions</li> <li>Code contributions<ul> <li>Prerequisites</li> <li>Environment setup</li> <li>Source code</li> <li>Making changes</li> <li>Committing changes</li> <li>Creating a Pull Request</li> <li>Merging Pull Requests</li> </ul> </li> <li>Coding style</li> <li>Releases</li> </ul>"},{"location":"CONTRIBUTING/#general","title":"General","text":"<p>We welcome all contributions from the community. Adhere to Code of Conduct at all times.</p>"},{"location":"CONTRIBUTING/#non-code-contributions","title":"Non-code contributions","text":"<p>We welcome non-code contributions as well. If you have any suggestions, ideas, or want to report a bug, follow these steps:</p> <ol> <li>Verify open issues\u00a0\u29c9     to see if someone reposrted similar issue or requested a similar feature.</li> <li>If the issue exists, upvote it and share more information     in a comment (use cases, examples and so on).</li> <li>If the issue does not exist, create a new one from the     Issues Templates\u00a0\u29c9     tab.</li> <li>Follow the appropriate template for the issue</li> </ol>"},{"location":"CONTRIBUTING/#code-contributions","title":"Code contributions","text":""},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ol> <li>Read ROADMAP to understand the project's goals.</li> <li>Read Developer's Certificate of Origin (DCO) in DCO.md     (you must sign-off your PRs).</li> <li>Read LICENSE.</li> <li>Follow the steps in Non-code contributions     and report a bug or request a feature.</li> <li>Fork the repository     (see here\u00a0\u29c9     for more information).</li> </ol>"},{"location":"CONTRIBUTING/#environment-setup","title":"Environment setup","text":"<p>Prerequisites (one time setup):</p> <ol> <li>Check you have Python 3.x installation available (as <code>python3</code> or <code>python</code>)</li> <li>Install <code>pdm</code> (see official installation instructions\u00a0\u29c9)</li> <li>Enable <code>pep582</code> globally (see official instructions\u00a0\u29c9)</li> </ol> <p>Change to the cloned directory and run:</p> <pre><code>pdm setup\n</code></pre> <p>Caution</p> <p>This project uses PEP582\u00a0\u29c9 to manage dependencies. Check <code>__pypackages__/README.md</code> for more information.</p> <p>Tip</p> <p>Check here\u00a0\u29c9 for more information on IDE configuration with PEP582.</p>"},{"location":"CONTRIBUTING/#source-code","title":"Source code","text":"<p>After the setup, you will, probably, contribute to the following directories:</p> <ul> <li><code>src/</code>\u00a0\u29c9     with the source code of the project</li> <li><code>tests/</code>\u00a0\u29c9     with the project's tests</li> </ul> <p>Check project documentation\u00a0\u29c9 and <code>code</code>/<code>docs</code> in these folders for more information.</p>"},{"location":"CONTRIBUTING/#making-changes","title":"Making changes","text":"<p>Keep the following in mind:</p> <ul> <li>Tests matter - use <code>hypothesis</code> (or similar) for property-based     testing if possible.</li> <li>Any changes need 100% test coverage - if not possible,     explain why in the comments or PR description and exclude these lines).</li> <li>Your changes should pass pre-commit hooks\u00a0\u29c9.</li> </ul> <p>Note</p> <p>Pre-commit hooks automatically fix your code, therefore you might have to recommit multiple time before the commit is accepted.</p>"},{"location":"CONTRIBUTING/#committing-changes","title":"Committing changes","text":"<p>Please follow the simplified Conventional Commits\u00a0\u29c9 standard in every commit, for example:</p> <pre><code>git commit -s -S -m \"feat: add new feature\"\n</code></pre> <ul> <li>You can only use <code>fix</code>, <code>feat</code>, <code>fix!</code>, <code>feat!</code> types,     we do not accept any other types (e.g. <code>chore</code>, <code>refactor</code>, <code>docs</code> and     others).</li> <li>Your commits should be atomic and should not contain many changes.</li> <li>Your commits have to be signed-off (use <code>-s</code> flag in <code>git commit</code> as in     the example above). Please see the DCO for more information.</li> <li>Your commits have to be signed (use <code>-S</code> flag in <code>git commit</code> as in     the example above). Please see the Signing commits\u00a0\u29c9     for more information.</li> </ul> <p>Tip</p> <p>You can use <code>pdm commit-guided</code> for interactive commit adhering to the guide.</p> <p>Tip</p> <p>You can use <code>pdm commit</code> (same as <code>git commit -s -S</code>).</p> <p>Tip</p> <p>You can use <code>pdm commit-fast</code>, a faster version of <code>commit-guided</code>.</p> <p>Note</p> <p>Signing and commit messages are automatically checked by the pre-commit hooks and CI/CD pipeline.</p>"},{"location":"CONTRIBUTING/#creating-a-pull-request","title":"Creating a pull request","text":"<p>Follow GitHub Flow\u00a0\u29c9; <code>main</code> branch should always be in the releasable state.</p> <p>Small pull requests are encouraged. If, for some reason, you cannot make small a pull request, describe the reasons in the <code>pull request</code> description.</p> <p>Pull requests have to be:</p> <ul> <li>Contain <code>type</code> akin to the commits;     Same rules apply (only <code>fix</code>, <code>feat</code>, <code>fix!</code>, <code>feat!</code> allowed)</li> <li>Linked to the <code>issue</code> via <code>Closes #XXX</code>     (where <code>XXX</code> is the issue number) in the description.</li> <li>Target the <code>main</code> branch.</li> <li>Contain descriptive header and (optionally) description.</li> </ul> <p>Tip</p> <p>Type of the pull request should be the largest of all commits (<code>feat!</code> &gt; <code>fix!</code> &gt; <code>feat</code> &gt; <code>fix</code>)</p> <p>Other features:</p> <ul> <li>Pull requests will be automatically labeled based on the type of the commit     (in some cases, you might want to manually add the label from the existing ones).</li> <li>Stale pull requests (no changes for 7 days) will be automatically closed     (can be reopened later).</li> <li>Pull requests will be automatically checked by the CI/CD pipeline.</li> </ul> <p>Warning</p> <p>Once you submit a PR, do not rebase it (easier to review the changes).</p>"},{"location":"CONTRIBUTING/#merging-pull-requests","title":"Merging pull requests","text":"<p>Maintainers will merge your pull request only after the CI/CD checks pass. In general, if <code>pre-commit</code> checks pass, no major changes should be necessary.</p> <p>Note</p> <p>We use <code>Squash and Merge</code> strategy for merging pull requests, individual commits should not matter if they follow the guidelines.</p> <p>If you need help with this part of the process, tag one of the maintainers in the PR.</p>"},{"location":"CONTRIBUTING/#coding-style","title":"Coding style","text":"<p><code>pre-commit</code> hooks check most of the guidelines, but maintainers reserve the right to ask for changes in the code style if necessary.</p> <p>In special cases you might want to ignore a certain style rule, if so, describe the reason in the comment.</p>"},{"location":"CONTRIBUTING/#releases","title":"Releases","text":"<p>After maintainers merged your PR, your changes will be automatically included in the next release.</p> <ul> <li>We release new versions of the project after each change according     to the Semantic Versioning\u00a0\u29c9 specification.</li> <li>CHANGELOG links to the release notes.</li> <li>We show certain releases to the public     by a blog post or a similar announcement (see ANNOUNCEMENTS).</li> <li>Public releases comprise of a few merged pull requests and are     performed under maintainers' discretion.</li> </ul>"},{"location":"DCO/","title":"Developer Certificate of Origin","text":"<p>Version 1.1</p> <p>Copyright (C) 2004, 2006 The Linux Foundation and its contributors.</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p> <p>Developer's Certificate of Origin 1.1</p> <p>By making a contribution to this project, I certify that:</p> <p>(a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or</p> <p>(b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or</p> <p>\u00a9 The contribution was provided directly to me by some other person who certified (a), (b) or \u00a9 and I have not modified it.</p> <p>(d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.</p>"},{"location":"GOVERNANCE/","title":"Governance","text":"<p>This document describes the roles and responsibilities of the maintainers.</p>"},{"location":"GOVERNANCE/#decision-process","title":"Decision process","text":"<ul> <li>We welcome all contributors and maintainers,     see CONTRIBUTING.md on any project-related topics.</li> <li>open-nudge reserves the right to make final     decisions on the project (the roadmap, features, releases,     general project direction and so on)</li> </ul>"},{"location":"GOVERNANCE/#roles","title":"Roles","text":"<ul> <li>External contributors - anyone who is not a maintainer (can submit PRs,     issues, and so on)</li> <li>Maintainers - people who have write access to the repository (can merge     PRs, open/close issues and so on)</li> <li>Specific roles (e.g. release manager, security leader) are under     the discretion of open-nudge</li> </ul>"},{"location":"GOVERNANCE/#questions","title":"Questions","text":"<p>In case of specific questions, open a new discussion or contact one of the maintainers directly.</p>"},{"location":"LICENSE/","title":"License","text":"<p>Apache License Version 2.0, January 2004 http://www.apache.org/licenses/</p> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li>Definitions.</li> </ol> <p>\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p> <ol> <li> <p>Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices stating that You changed the files; and</p> <p>\u00a9 You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <p>To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.</p> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"ROADMAP/","title":"Roadmap","text":"<ul> <li>Initial assessment of the features.</li> <li>Expansion with common potential mistakes seen in commercial     and non-commerical Python codebases.</li> </ul>"},{"location":"SECURITY-DEPENDENCY/","title":"Environment dependencies policy","text":""},{"location":"SECURITY-DEPENDENCY/#purpose","title":"Purpose","text":"<p>This policy describes how <code>pynudger</code> maintainers consume third-party packages.</p>"},{"location":"SECURITY-DEPENDENCY/#scope","title":"Scope","text":"<p>This policy applies to all <code>pynudger</code> maintainers and all third-party packages used in the <code>pynudger</code> project.</p>"},{"location":"SECURITY-DEPENDENCY/#policy","title":"Policy","text":"<p><code>pynudger</code> contributors must follow these guidelines when consuming third-party packages:</p>"},{"location":"SECURITY-DEPENDENCY/#general","title":"General","text":"<ul> <li>Only use third-party packages necessary for the functionality of     <code>pynudger</code>.</li> <li>Use maintained third-party packages with a reasonably good reputation.</li> <li>Prefer small, single-purpose packages over large, complex ones.</li> <li>Implement small functionalities within the project instead of     using a third-party package (unless the third-party package is lightweight,     well-maintained and has a good reputation).</li> <li>Avoid using third-party packages with known security vulnerabilities.</li> <li>Before sending changes with new dependencies, make sure all automated     tests pass (<code>pre-commit</code> checks and continuous integration pipelines)</li> </ul>"},{"location":"SECURITY-DEPENDENCY/#versioning","title":"Versioning","text":"<ul> <li>Use package manager to manage third-party dependencies.</li> <li>Lock all of the dependencies (including developer tools) before     merging the changes.</li> <li>Specify only <code>major</code> versions for all stable third-party packages     (version <code>1.x.y</code> or above) unless <code>minor</code> or <code>patch</code> versions     are required for compatibility or functionality.</li> <li>Specify <code>major</code>, <code>minor</code>, and <code>patch</code> versions for all pre-release     third-party packages (version <code>0.x.y</code>).</li> <li>Use the latest <code>major</code> version of all third-party packages whenever possible.</li> </ul>"},{"location":"SECURITY-DEPENDENCY/#procedure","title":"Procedure","text":"<p>When adding a new third-party package to <code>pynudger</code>, contributors must follow these steps:</p> <ol> <li>Is the package necessary for the functionality     of <code>pynudger</code>?</li> <li>How stable is the package? Is it a pre-release version (<code>0.x.y</code>) or a stable     version (<code>1.x.y</code> or above)?</li> <li>Research the package. Is it well-maintained? Does it have a good reputation?</li> <li>Choose a compatible version of the package.     Use the latest version whenever possible.</li> <li>Update the <code>pyproject.toml</code> and lock the dependencies.</li> </ol>"},{"location":"SECURITY-DEPENDENCY/#archived-or-deprecated-packages","title":"Archived or deprecated packages","text":"<p>When a third-party package is discontinued, the <code>pynudger</code> maintainers must ensure replacement of the package with a suitable alternative.</p>"},{"location":"SECURITY-DEPENDENCY/#enforcement","title":"Enforcement","text":"<p>This policy is enforced by the <code>pynudger</code> maintainers. Maintainers are expected to review each other's code changes to ensure that they comply with this policy.</p>"},{"location":"SECURITY-DEPENDENCY/#exceptions","title":"Exceptions","text":"<p>Exceptions to this policy may be granted by the <code>pynudger</code> maintainers/leaders on a case-by-case basis.</p>"},{"location":"SECURITY-DEPENDENCY/#credits","title":"Credits","text":"<p>This policy was adapted from the Kubescape Community\u00a0\u29c9 and Project Capsule\u00a0\u29c9</p>"},{"location":"SECURITY-SELF-ASSESSMENT/","title":"Security self-assessment of pynudger","text":"<p>Source: https://tag-security.cncf.io/community/assessments/guide/self-assessment/</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Metadata<ul> <li>Security links</li> </ul> </li> <li>Overview<ul> <li>Background</li> <li>Actors</li> <li>Actions</li> <li>Goals</li> <li>Non-goals</li> </ul> </li> <li>Self-assessment use</li> <li>Security functions and features</li> <li>Project compliance</li> <li>Secure development practices<ul> <li>Deployment pipeline</li> <li>Communication channels</li> <li>Ecosystem</li> </ul> </li> <li>Security issue resolution<ul> <li>Responsible disclosure practice</li> <li>Incident response</li> </ul> </li> <li>Appendix</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#metadata","title":"Metadata","text":"Category Resource Assessment Stage Incomplete Creator open-nudge Software https://github.com/open-nudge/pynudger\u00a0\u29c9 Website https://open-nudge.github.io/pynudger\u00a0\u29c9 Security Provider No Languages Python SBOM https://github.com/open-nudge/pynudger/releases\u00a0\u29c9"},{"location":"SECURITY-SELF-ASSESSMENT/#security-links","title":"Security links","text":"Category Resource Security File https://github.com/open-nudge/pynudger/blob/main/SECURITY.md\u00a0\u29c9 Security Insights https://github.com/open-nudge/pynudger/blob/main/SECURITY-INSIGHTS.yml\u00a0\u29c9 Dependencies https://github.com/open-nudge/pynudger/blob/main/pyproject.toml\u00a0\u29c9 Release Artifacts https://github.com/open-nudge/pynudger/releases\u00a0\u29c9"},{"location":"SECURITY-SELF-ASSESSMENT/#overview","title":"Overview","text":"<p>opennudge Python linter (naming conventions and other automated checks)</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#background","title":"Background","text":"<p>Python opinionated style linter not providing any security features.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#actors","title":"Actors","text":"<ul> <li>opennudge\u00a0\u29c9 - organization providing core     security features</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#actions","title":"Actions","text":"<ul> <li>Core security features are provided by     opentemplate\u00a0\u29c9 </li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#goals","title":"Goals","text":"<p>Python opinionated style linter not providing any security features.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#non-goals","title":"Non-goals","text":"<ul> <li>Being comprehensive end-to-end linting solution     (akin to ruff\u00a0\u29c9)</li> <li>Providing rules for other languages than Python</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#self-assessment-use","title":"Self-assessment use","text":"<p>This self-assessment was automatically generated by the opentemplate\u00a0\u29c9  template to provide basic security information about the project. It should be extended by adding project-specific security information.</p> <p>Important</p> <p>opennudge\u00a0\u29c9 does not intend to provide a security audit of the project or function as an independent assessment or attestation of its security posture.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#security-functions-and-features","title":"Security functions and features","text":"Component Applicability Description of Importance template Critical Base GitHub template of the repository provided by <code>opennudge</code>. Used to provide initial security posture (pipelines, pre-commit, practices, hardening etc.) See open-nudge/pynudger\u00a0\u29c9 for more information"},{"location":"SECURITY-SELF-ASSESSMENT/#project-compliance","title":"Project compliance","text":"<p>Project tries to comply with the following security standards:</p> <ul> <li>SLSA\u00a0\u29c9 - L3+ if the project is public or coming     from a GitHub Enterprise Account with Advanced Security, L2 otherwise</li> <li>The project is currently not third-party audited or verified</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#secure-development-practices","title":"Secure development practices","text":""},{"location":"SECURITY-SELF-ASSESSMENT/#deployment-pipeline","title":"Deployment pipeline","text":"<p>Core of the deployment pipeline is based on the following tools:</p> <ul> <li>opentemplate\u00a0\u29c9 :     see  open-nudge/opentemplate\u00a0\u29c9     for more information</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#communication-channels","title":"Communication channels","text":"<p>You can reach out to us by Private Security Reporting\u00a0\u29c9 or by:</p> <ul> <li>means of communication provided at the account level here\u00a0\u29c9</li> <li>opening an issue in the repository (somebody will get back to you)</li> </ul>"},{"location":"SECURITY-SELF-ASSESSMENT/#ecosystem","title":"Ecosystem","text":"<p>This project is a part of the Python ecosystem.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#security-issue-resolution","title":"Security issue resolution","text":"<p>The <code>open-nudge/pynudger</code>\u00a0\u29c9 security policy is maintained in the <code>SECURITY.md</code>\u00a0\u29c9 file.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#responsible-disclosure-practice","title":"Responsible disclosure practice","text":"<p>The <code>open-nudge/pynudger</code>\u00a0\u29c9 accepts vulnerability reports as outlined in the security policy defined in <code>SECURITY.md</code>\u00a0\u29c9 file.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#incident-response","title":"Incident response","text":"<p>If you discover a security vulnerability within <code>open-nudge/pynudger</code>\u00a0\u29c9 please report it as outlined in the <code>SECURITY.md</code> file or contact security@opennudge.com.</p>"},{"location":"SECURITY-SELF-ASSESSMENT/#appendix","title":"Appendix","text":"<ul> <li>Project is largely aligned with the     Open Source Security Foundation best practices\u00a0\u29c9</li> <li>Some false negatives regarding the best practices were spotted     (e.g. not using fuzzing), consult <code>scorecard.yml</code> for more information</li> </ul>"},{"location":"SECURITY/","title":"Security","text":"<p>Report any security vulnerabilities you find according to these guidelines.</p>"},{"location":"SECURITY/#general","title":"General","text":"<ul> <li>Please adhere to Code of Conduct at all times.</li> </ul>"},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a vulnerability","text":"<ul> <li>If you discover a vulnerability, report it directly to the code     maintainers, preferably using GitHub's     Private Vulnerability Reporting\u00a0\u29c9.</li> <li>If you cannot find a way to report it, or have received no     response after repeated attempts,     contact the creators directly\u00a0\u29c9.</li> </ul> <p>Thank you.</p>"},{"location":"SECURITY/#security-measures","title":"Security measures","text":"<p>This project strives to implement Open Source Security Foundation\u00a0\u29c9 (OSSF) Best Practices\u00a0\u29c9.</p> <p>Some of the security measures undertaken in this project include:</p> <ul> <li>OSSF Scorecard\u00a0\u29c9</li> <li>Security file</li> <li>Security Insights Specification\u00a0\u29c9     as defined here\u00a0\u29c9</li> <li>Security Self Assessment</li> <li>Security Dependencies Policy</li> <li>Renovate Bot\u00a0\u29c9     for automated dependency updates</li> <li>Software Bills Of Material (SBOMs)\u00a0\u29c9</li> <li>Sigstore signing\u00a0\u29c9     as seen here\u00a0\u29c9</li> <li>GitHub Actions CI/CD pipelines with minimal permissions</li> <li>GitHub Actions CI/CD pipelines hardened via Harden Runner\u00a0\u29c9</li> <li>Pre-commit hooks\u00a0\u29c9 for local code quality     and security verification</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>pynudger</li> </ul>"},{"location":"reference/pynudger/","title":"Pynudger","text":"<p>Pynudger is an official opennudge linter.</p>"},{"location":"template/","title":"opentemplate","text":""},{"location":"template/#features","title":"Features","text":"<p>opentemplate is a Python template which is:</p> <ul> <li>Truly open source\u00a0\u29c9:     no tokens, no fees, no premium plans, open source software only</li> <li>Easy to use\u00a0\u29c9:     clone templated repo, run <code>pdm setup</code> and focus on your code</li> <li>State of the art\u00a0\u29c9:     best checkers for Python, YAML, Markdown, prose, and more unified</li> <li>Secure\u00a0\u29c9:     SLSA Level 3\u00a0\u29c9, SBOMs\u00a0\u29c9,     attestations\u00a0\u29c9,     secured egress\u00a0\u29c9,     OSSF Best Practices\u00a0\u29c9</li> <li>Consistent\u00a0\u29c9:     all pipelines (<code>GitHub Actions</code>, <code>pre-commit</code>)     share the same <code>pyproject.toml</code> config</li> <li>Performant\u00a0\u29c9:     parallel checks, builds, minimally-sized caches and checkouts</li> </ul> <p>Important</p> <p>An example repository using <code>opentemplate</code> here\u00a0\u29c9</p> <p>Caution</p> <p>All files in this repo will be copied to your project, using the title and description you provide.</p>"},{"location":"template/#code-quality-python-focused","title":"Code quality (Python focused)","text":"<p>Important</p> <p>You can adjust everything from <code>pyproject.toml</code> level!</p> <ul> <li>Package manager: <code>pdm</code>\u00a0\u29c9     with a single <code>pdm setup</code> manages everything!     (see why pdm\u00a0\u29c9)</li> <li>Testing: <code>pytest</code>\u00a0\u29c9     (with <code>coverage</code>\u00a0\u29c9,     and <code>hypothesis</code>\u00a0\u29c9 for     fuzzing); testing across all Python versions     done WITHOUT <code>tox</code>\u00a0\u29c9     or <code>nox</code>\u00a0\u29c9(managed directly by <code>pdm</code>!)</li> <li>Documentation: <code>mkdocs</code>\u00a0\u29c9 -     document once, have it everywhere (unified look on GitHub and hosted docs),     semantically versioned\u00a0\u29c9     (via <code>mike</code>\u00a0\u29c9),     autogenerated from     coverage\u00a0\u29c9,     deadlink\u00a0\u29c9     and spell-checked\u00a0\u29c9 docstrings,     automatically deployed after each GitHub release with clean     material design look\u00a0\u29c9</li> <li>Code formatting and linting: <code>ruff</code>\u00a0\u29c9     (checks hand-picked for best quality and ease of use; most are enabled),     <code>basedpyright</code>\u00a0\u29c9     for type checking, <code>FawltyDeps</code>\u00a0\u29c9     for static dependency analysis</li> <li>Each file is copyrighted with your git information -     copyrights added automatically by <code>pre-commit</code>,     see REUSE\u00a0\u29c9 and     SPDX Licensing\u00a0\u29c9     for more information</li> <li>Automated Python version updates: <code>pyproject.toml</code>     (and GitHub Actions pipelines where necessary)     are automatically updated to always use 3 latest Python     versions (via <code>cogeol</code>\u00a0\u29c9)     according to Scientific Python SPEC0\u00a0\u29c9     deprecation and end-of-life policies</li> <li>Other code linting: checks for <code>YAML</code>, <code>Markdown</code>, <code>INI</code>, <code>JSON</code>, <code>prose</code>,     all config files, <code>shell</code>, <code>GitHub Actions</code> -     all grouped as <code>check-&lt;group&gt;</code> and <code>fix-&lt;group&gt;</code> <code>pdm</code> commands</li> <li>Release to <code>PyPI</code> and <code>GitHub</code>: done by making a     GitHub release\u00a0\u29c9,     each release is attested and immutably versioned via     <code>commition</code>\u00a0\u29c9</li> <li><code>pre-commit</code>\u00a0\u29c9: all checks and fixers are run     before commit, no need to remember them!     (<code>pre-commit</code> is also setup after running a single <code>pdm setup</code> command!)</li> </ul>"},{"location":"template/#security","title":"Security","text":"<p>Important</p> <p>Everything below is already provided out of the box, one-click only!</p> <ul> <li>Hardening\u00a0\u29c9:     during setup, an automated issue is created to guide you step by step     through enabling rulesets, branch protection, mandatory reviewers,     necessary signatures etc.     (see here for an example\u00a0\u29c9).     Best part? <code>harden.yml</code> workflow, which does that     automatically (if you follow the instructions in the issue)!</li> <li>SLSA compliance\u00a0\u29c9:     Level 3+ for public/enterprise repositories     and L2 for private repositories     via slsa-github-generator\u00a0\u29c9</li> <li>Software Bills of Materials\u00a0\u29c9 (SBOMs):     generated per-Python, per-OS, per-dependency group -     each attested\u00a0\u29c9,     and attached to the release</li> <li>Static security analysis tooling: <code>osv-scanner</code>\u00a0\u29c9     checks against OSV database\u00a0\u29c9,     <code>semgrep</code>\u00a0\u29c9 monitors code quality and security,     <code>zizmor</code>\u00a0\u29c9 verifies workflows,     while <code>trufflehog</code>\u00a0\u29c9     looks for leaked secrets</li> <li>Reusable workflows: most of the workflows are reusable\u00a0\u29c9     (pointing to <code>opentemplate</code> workflows) to improve security and     get automated pipeline updates - you can make them local by     running <code>.github/reusability/localize.sh</code> script. No need     to manage/update your own workflows!</li> <li>Pinned dependencies: all dependencies are pinned to specific versions     (GitHub Actions, <code>pre-commit</code> and <code>pdm.lock</code>)</li> <li>Monitored egress in GitHub Actions: <code>harden-runner</code>\u00a0\u29c9     with a whitelisted minimal set of domains necessary to run the workflows</li> <li>Security documentation: <code>SECURITY.md</code>, <code>SECURITY-INSIGHTS.yml</code>,     <code>SECURITY-SELF-ASSESSMENT.md</code> (only security file to update     manually before release), and <code>SECURITY-DEPENDENCY.md</code>     define high quality security policies</li> </ul> <p>Tip</p> <p>See this example release\u00a0\u29c9 for all security artifacts described above.</p> <p>Note</p> <p>Although there is around 100 workflows helping you maintain high quality, most of them reuse the same workflow, which makes them maintainable and extendable.</p>"},{"location":"template/#github","title":"GitHub","text":"<ul> <li>GitHub Actions cache - after each merge     to the <code>main</code> branch, dependencies are cached per-group and     per-OS for maximum performance</li> <li>Minimal checkouts and triggers - each workflow is     triggered based on appropriate path and performs     <code>sparse-checkout</code>\u00a0\u29c9     when possible to minimize the amount of data transferred;     great for large repositories with many files and large history</li> <li>Dependency updates: Renovate\u00a0\u29c9     updates all dependencies in a grouped manner once a week</li> <li>Templates: every possible template included (discussions,     issues, pull requests - each extensively described)</li> <li>Predefined labels - each pull request will be automatically labeled     (over <code>20</code> labels created during setup!) based on changed files     (e.g. <code>docs</code>, <code>tests</code>, <code>deps</code>, <code>config</code> etc.).     No need to specify semver\u00a0\u29c9 <code>scope</code>     of commit anymore!</li> <li>Open source documents: <code>CODE_OF_CONDUCT.md</code>,     <code>CONTRIBUTING.md</code>, <code>ROADMAP.md</code>, <code>CHANGELOG.md</code>, <code>CODEOWNERS</code>, <code>DCO</code>,     and much more - all automatically added and linked to your     Python documentation out of the box</li> <li>Release changelog: <code>git-cliff</code>\u00a0\u29c9 - commits     automatically divided based on <code>labels</code>, <code>types</code>, human/bot authors,     and linked to appropriate issues and pull requests</li> <li>Config files: editorconfig\u00a0\u29c9, <code>.gitattributes</code>,     always the latest Python <code>.gitignore</code> etc.</li> <li>Commit checks: verification of signatures, commit messages,     DCO signing, no commit to the main branch policy     (via conform\u00a0\u29c9)</li> </ul>"},{"location":"template/#comparison","title":"Comparison","text":"<ul> <li>Broader scope than other <code>cookiecutter</code>\u00a0\u29c9     templates (e.g. one-click and one-command setup, security,     GitHub Actions, comprehensive docs, rulesets. deprecation policies,     automated copyrights and more).     Check here\u00a0\u29c9     or here\u00a0\u29c9     to compare yourself.</li> <li>Truly FOSS (no freemium, no paid plans, no tokens) when compared to commercial     offerings like <code>snyk</code>\u00a0\u29c9 or     <code>jit.io</code>\u00a0\u29c9. Additionally Python-centric and sticks     with tools widely known by developers (their own environment and     GitHub interface).</li> </ul> <p>Tip</p> <p>See detailed comparison in the documentation\u00a0\u29c9</p>"},{"location":"template/#quick-start","title":"Quick start","text":""},{"location":"template/#installation","title":"Installation","text":"<p>Note</p> <p>Install <code>pdm</code>\u00a0\u29c9 (if you don't have it already), for Linux/MacOS:</p> <pre><code>curl -sSL https://pdm-project.org/install-pdm.py | python3 -\n</code></pre> <ol> <li>Create a new GitHub repository using this template     (green <code>Use this template</code> button)</li> <li>Name your repo (use underscore <code>_</code>, not hyphens <code>-</code>)</li> <li>Add project description (necessary!)</li> <li>Wait until the setup commit appears     (performed by <code>github-actions[bot]</code>, it may take a few minutes)</li> <li>Clone the repository</li> <li>Run <code>pdm setup</code> command locally to setup development environment</li> </ol> <p>Tip</p> <p>For more details read the documentation\u00a0\u29c9</p>"},{"location":"template/#usage","title":"Usage","text":"<ol> <li>Create a new branch</li> <li>Optionally add dependencies to <code>pyproject.toml</code></li> <li>Write code in <code>/src/&lt;project_name&gt;</code> and tests in <code>/tests</code></li> <li>Use <code>git add</code>, <code>git commit</code> and <code>git push</code> your changes</li> <li><code>pre-commit</code> will guide you through the process</li> </ol> <p>Tip</p> <p>For more details read the documentation\u00a0\u29c9</p>"},{"location":"template/#examples","title":"Examples","text":"<p>Caution</p> <p>Click on each example to see it in action!</p> Run checkers or fixers manually (click me) <pre><code>&gt; pdm check-&lt;group&gt; [FILE1, FILE2, ...] # pdm fix-&lt;group&gt;\n</code></pre>  For example, to check __all Python files__:  <pre><code>&gt; pdm check-python\n</code></pre>  Or to check `/src/__init__.py`:  <pre><code>&gt; pdm check-python src/__init__.py\n</code></pre>  Note that all `check` and `fix` commands are grouped for your convenience:  <pre><code>&gt; pdm check-all # pdm fix-all\n</code></pre> Adjust template (click me) \u00a0  &gt; Most of the adjustments can be done by __only__ editing `pyproject.toml`  Common changes to `pyproject.toml`:  - Add dev dependencies under `[dependency-groups]`     (everything is named `dev-`) - Modify `[tool.pdm.scripts]` for custom command     (`check-` or `fix-`, the latter modifies files) - Use `[tool.]` to adjust specific tool configuration  &gt; __Adjusting these sections will affect `pre-commit` and `GitHub Actions`__   Disable some pre-commit check (click me) \u00a0  &gt; Disabling checks should be done cautiously!  `pre-commit` checks are defined in `.pre-commit-config.yaml`.  Disable a check using `SKIP` environment variable:  <pre><code>SKIP=\"&lt;group1&gt;,&lt;group2&gt;\" git commit -m &lt;message&gt;\n</code></pre>  For example, the following will skip `DCO` and `ini` checks and Python fixes (which would modify files):  <pre><code>SKIP=\"dco,ini,fix-python\" git commit -m &lt;message&gt;\n</code></pre>  For details, refer to the `id` fields in `.pre-commit-config.yaml`.  &gt; Some commands have both `-fix` and `-check` &gt; for different actions!   Disable GitHub Actions checks (click me) \u00a0  &gt; Disabling checks should be done cautiously!  When making a commit you can add one of the following strings to the message:  - `[skip ci]` - `[ci skip]` - `[no ci]` - `[skip actions]` - `[actions skip]`  &gt; Note that you can also merge pull requests __even if the checks fail__."},{"location":"template/about/","title":"About","text":"<p>In this section you can learn more about <code>opentemplate</code> itself; what is the motivation, how it compares and useful tips</p> <p>Caution</p> <p>You don\u2019t need to read this to use <code>opentemplate</code>, but a quick skim can be helpful.</p> <p>Explore:</p> <ul> <li>Philosophy \u2013 core ideas and goals</li> <li>Comparison \u2013 how it stacks up against other tools</li> <li>Tips and Tricks \u2013 get more out of <code>opentemplate</code></li> <li>FAQ \u2013 common questions answered</li> </ul>"},{"location":"template/about/comparison/","title":"Comparing <code>opentemplate</code> to similar tools","text":"<p>This guide compares <code>open-nudge/opentemplate</code>\u00a0\u29c9 with similar technologies, including templates, libraries, and platforms. While the overview is opinionated, we encourage you to verify details independently.</p> <p>Note</p> <p>If you spot inaccuracies, please open an issue or pull request with corrections.</p>"},{"location":"template/about/comparison/#feature-comparison","title":"Feature comparison","text":"<p>The following table compares <code>opentemplate</code> to similar tools:</p> Feature <code>open-nudge/opentemplate</code>\u00a0\u29c9 <code>pyscaffold</code>\u00a0\u29c9 cookiecutter-hypermodern-python\u00a0\u29c9 <code>microsoft/python-package-template</code>\u00a0\u29c9 Type Template Library Template Template Open Source \u2705 \u2705 \u2705 \u2705 Free \u2705 \u2705 \u2705 \u2705 Actively Maintained \u2705 \u274c \u274c \u274c Security-Focused \u2705 \u274c \u274c \u274c Latest Tooling \u2705 \u274c \u274c \u274c Mature \u274c \u2705 \u274c \u2705 Unified Config \u2705 \u274c \u274c \u274c GitHub-Centric \u2705 \u274c \u274c \u274c"},{"location":"template/about/comparison/#key-notes","title":"Key notes","text":"<ul> <li>Free: No extra cost for advanced features, but GitHub pricing may apply.</li> <li>Latest Tooling: Uses best-in-class tools     (e.g., <code>ruff</code>\u00a0\u29c9 for linting).</li> <li>Unified Config: Supports streamlined local and CI/CD setup via     <code>pyproject.toml</code>.</li> </ul>"},{"location":"template/about/comparison/#how-opentemplate-stands-out","title":"How <code>opentemplate</code> stands out","text":"<p>Compared to tools like snyk\u00a0\u29c9 or jit.io\u00a0\u29c9, <code>opentemplate</code> is:</p> <ul> <li>DevSecOps-Inspired \u2013 Security-aware but not solely focused on security.</li> <li>Python-Centric \u2013 Designed specifically for Python projects.</li> <li>Truly Open-Source \u2013 Unlike freemium or paid alternatives.</li> <li>GitHub-Integrated \u2013 Built to work seamlessly with GitHub, rather than     being a standalone platform.</li> </ul> <p>For developers seeking a modern, security-focused, and GitHub-native Python template, <code>opentemplate</code> is a compelling choice.</p>"},{"location":"template/about/faq/","title":"FAQ","text":""},{"location":"template/about/faq/#why-use-pdm-instead-of-uv","title":"Why use <code>pdm</code>\u00a0\u29c9 instead of <code>uv</code>\u00a0\u29c9?","text":"<p><code>pdm</code> offers more flexibility, including:</p> <ul> <li>PEP 582 support \u2013 Simplifies dependency management without virtual environments.</li> <li>Custom commands \u2013 Enables unified workflows without extra tools (more details\u00a0\u29c9).</li> </ul> <p>Note</p> <p><code>uv</code> is under evaluation and may be adopted in the future.</p>"},{"location":"template/about/faq/#why-use-renovate-instead-of-dependabot","title":"Why use <code>renovate</code>\u00a0\u29c9 instead of <code>dependabot</code>\u00a0\u29c9?","text":"<p><code>renovate</code> provides better support for:</p> <ul> <li><code>pdm.lock</code> (issue\u00a0\u29c9).</li> <li><code>[dev-dependencies]</code> (issue\u00a0\u29c9).</li> </ul> <p>Note</p> <p><code>dependabot</code> may be reconsidered once key issues are resolved and <code>uv</code> is used.</p>"},{"location":"template/about/faq/#why-is-basedpyright-used","title":"Why is <code>basedpyright</code>\u00a0\u29c9 used?","text":"<p><code>basedpyright</code> is a fork of <code>pyright</code>\u00a0\u29c9` which:</p> <ul> <li>makes the package <code>pip</code> installable     (unlike <code>pyright</code>\u00a0\u29c9)</li> <li>provides LSP\u00a0\u29c9     implementation for Python (unlike <code>mypy</code>\u00a0\u29c9)</li> <li>supports latest Python versions and features     (unlike <code>pytype</code>\u00a0\u29c9)</li> </ul>"},{"location":"template/about/faq/#why-use-the-rejected-pep582-standard","title":"Why use the rejected <code>pep582</code>\u00a0\u29c9 standard?","text":"<p>This approach allows:</p> <ul> <li> <p>Local dependencies \u2013 Everything stays in the project directory.</p> </li> <li> <p>Reusable installs \u2013 Simplifies scripting (e.g., running tests without     <code>nox</code> or <code>tox</code>).</p> </li> </ul> <p>Note</p> <p>This may change as tools such as <code>uv</code> evolve.</p>"},{"location":"template/about/faq/#why-is-changelogmd-empty","title":"Why is <code>CHANGELOG.md</code> empty?","text":"<p>It is not! It links to GitHub releases, which serve as the actual changelog.</p> <p>Options considered:</p> <ul> <li>Manual updates \u2013 Prone to being outdated.</li> <li>Bot updates \u2013 Conflicts with branch protection (details\u00a0\u29c9).</li> <li>GitHub releases link \u2013 Automated and secure.</li> </ul> <p>Tip</p> <p>You can manually copy release notes into <code>CHANGELOG.md</code> after a release.</p>"},{"location":"template/about/faq/#why-are-there-so-many-caches-in-github-actions","title":"Why are there so many caches in GitHub Actions?","text":"<p>Cache per each <code>dev-dependency</code>, standard dependencies (including optional) and even their combinations.</p> <p>This optimizes download times, which speeds up the workflows.</p> <p>Tip</p> <p>Check <code>.github/workflows/cache.yml</code> for cache settings.</p>"},{"location":"template/about/faq/#feature-does-not-work-on-windows","title":"Feature does not work on Windows","text":"<p>Windows features are best-effort and may not be fully supported.</p> <p>In terms of pre-commit hooks, more involved commands (e.g. <code>sbom-*</code> scripts or <code>fix-legal</code>) use Linux/MacOS specific features and may not work.</p> <p>Upvote this issue\u00a0\u29c9 when it comes to <code>fix-legal</code> script.</p>"},{"location":"template/about/philosophy/","title":"<code>opentemplate</code> Philosophy","text":""},{"location":"template/about/philosophy/#open","title":"Open","text":"<p>Transparent and community-driven; everyone can contribute, suggest changes, and voice opinions.</p>"},{"location":"template/about/philosophy/#ethical-nudging","title":"Ethical nudging","text":"<p>Encourages best practices by:</p> <ul> <li>Simplifying setup</li> <li>Reducing cognitive load (e.g., commit scope automation)</li> <li>Providing sensible defaults</li> <li>Making skipping best practices harder than following them</li> <li>Keeping explanations concise</li> <li>Automating reliably</li> </ul> <p>Note</p> <p>Inspired by nudge theory\u00a0\u29c9.</p>"},{"location":"template/about/philosophy/#adjustable","title":"Adjustable","text":"<p>No one-size-fits-all is possible. <code>opentemplate</code> enables intuitive customization by:</p> <ul> <li>Centralized config (<code>pyproject.toml</code>)</li> <li>Documented examples of adjustments provided</li> <li>Forkable for full control</li> </ul>"},{"location":"template/about/philosophy/#secure","title":"Secure","text":"<p>Integrates <code>devsecops</code> best practices (inspired by Python, Go) if:</p> <ul> <li>No added developer burden</li> <li>Benefits greatly outweigh daily usage costs</li> </ul>"},{"location":"template/about/philosophy/#state-of-the-art-practices","title":"State-of-the-Art practices","text":"<p>Follows modern best practices under the following conditions:</p> <ul> <li>Derived from reliable sources</li> <li>Not overly experimental</li> <li>Aligned with core principles</li> </ul> <p>Caution</p> <p>Some practices may be opinionated and should be adjusted.</p>"},{"location":"template/about/tips-and-tricks/","title":"Tips and tricks","text":"<p>This guide provides useful tips for working with the <code>opentemplate</code>-based projects.</p>"},{"location":"template/about/tips-and-tricks/#committing","title":"Committing","text":"<p>Important</p> <p>You can use <code>git commit</code> normally; <code>pre-commit</code> will not allow you commit without passing all the checks.</p> <p><code>opentemplate</code> offers the following commit options:</p> <ul> <li> <p><code>pdm run commit</code> \u2013 Runs <code>git commit</code> with <code>--signoff --gpg-sign</code>.</p> </li> <li> <p><code>pdm run commit-type</code> \u2013 Prompts for a commit message and type     (<code>feat</code>, <code>fix</code>, <code>feat!</code>, <code>fix!</code>).</p> </li> <li> <p><code>pdm run commit-guided</code> \u2013 Opens an editor with commit type options.</p> </li> </ul> <p>Important</p> <p>This feature will likely be moved to a separate tool in the future.</p>"},{"location":"template/configuration/","title":"Configuration","text":"<p>Most settings for <code>opentemplate</code> are managed in <code>pyproject.toml</code>, with full flexibility for customization if needed.</p> <p>Start here:</p> <ul> <li>Basic \u2013 common settings for most use cases</li> <li>Advanced \u2013 for adding tool groups or complex changes</li> </ul> <p>Tip</p> <p>For deeper insight and easier adjustments, see the Details documentation.</p>"},{"location":"template/configuration/advanced/","title":"Advanced","text":"<p>To host your own template based on <code>opentemplate</code>, you can follow these steps:</p> <ol> <li>Fork the repository\u00a0\u29c9     to your own GitHub account/organization</li> <li>Make it a template repository\u00a0\u29c9</li> <li>Follow the steps in the quick start guide (e.g. hardening)</li> <li>Clone the repository, <code>pdm setup</code> and perform your changes</li> </ol> <p>Tip</p> <p>Improvements to <code>opentemplate</code> are welcome! Please open an issue, discuss with the maintainers and your features might be upstreamed.</p>"},{"location":"template/configuration/advanced/#general","title":"General","text":"<p>Many of the adjustments will be tested as you develop them, as <code>opentemplate</code> is also a Python package.</p> <p>Caveats to remember:</p> <ul> <li><code>.github/workflows/template-*</code> - files should be of special interest     as they are used for <code>template</code> related functionality, e.g. testing</li> <li><code>.github/workflows/release*.yml</code> - most complex workflow, a few parts     are not fully tested currently.</li> </ul>"},{"location":"template/configuration/advanced/#tips","title":"Tips","text":"<p>When adding a new feature (e.g. tool/check) you might consider the following algorithm-like steps:</p> <ol> <li> <p>Check if the tool is available as a Python package     (e.g. on <code>PyPI</code>\u00a0\u29c9)</p> </li> <li> <p>If yes and it fits in one of the categories (e.g. <code>dev-python</code>):</p> <ol> <li> <p>Add the package to <code>pyproject.toml</code>     (usually <code>dev-&lt;category&gt;</code> in <code>[dependency-groups]</code> section)</p> </li> <li> <p>Specify only the major version (e.g. <code>&gt;=1</code>) if above <code>1.0.0</code>,     or the exact version if below <code>1.0.0</code></p> </li> <li> <p>Add the tool call to <code>[tool.pdm.scripts]</code> under <code>check-&lt;category&gt;</code>     and <code>fix-&lt;category&gt;</code> if applicable</p> </li> <li> <p>Go to testing steps below</p> </li> </ol> </li> <li> <p>If yes, but the appropriate category does not exist:</p> <ol> <li> <p>Create a new <code>dev-&lt;category&gt;</code> and put the package there</p> </li> <li> <p>Create appropriate entry in <code>.pre-commit-config.yaml</code>     under the <code>- repo: \"local\"</code> section, <code>id: &lt;category&gt;</code></p> </li> <li> <p>Create an entry in <code>.github/renovate.json</code> with appropriate     <code>matchPackageNames</code>\u00a0\u29c9</p> </li> <li> <p>Create three workflows in <code>.github/workflows</code>     (see <code>GitHub Actions</code> guide for more details):</p> <ol> <li> <p><code>&lt;category&gt;.yml</code> - checker run on human PRs</p> </li> <li> <p><code>&lt;category&gt;-renovate.yml</code> - checker run on Renovate PRs</p> </li> <li> <p><code>&lt;category&gt;-reusable.yml</code> - checker run used by the other two     and which (probably) uses <code>.github/workflows/check-reusable.yml</code></p> </li> </ol> </li> <li> <p>Go to testing steps below</p> </li> </ol> </li> <li> <p>If not:</p> <ol> <li> <p>Create appropriate entry in <code>.pre-commit-config.yaml</code> if the tool is available as a <code>pre-commit</code> hook     (or try to create one if not)</p> </li> <li> <p>Add support for the tool in <code>.github/renovate.json/</code>     (if applicable and available)</p> </li> <li> <p>Create three workflows in <code>.github/workflows</code>     (see <code>GitHub Actions</code> guide for more details):</p> <ol> <li> <p><code>&lt;category&gt;.yml</code> - checker run on human PRs</p> </li> <li> <p><code>&lt;category&gt;-update.yml</code> - if the tool requires updates,     but not supported by <code>renovate</code>\u00a0\u29c9</p> </li> </ol> </li> </ol> </li> </ol> <p>Tip</p> <p>Order of the <code>.pre-commit-config.yaml</code> entries is important. Make sure to think about the implications of the changes done by your entry on the whole pipeline.</p> <p>Caution</p> <p>This is a rough guide and in many specific cases you might have to consult specific functionalities and their implementation (start by consulting details documentation).</p>"},{"location":"template/configuration/basic/","title":"Basic","text":"<p>This guide covers essential adjustments to the template.</p> <p>Caution</p> <p>Keep changes minimal to simplify updates. If your changes relate to a specific section, you may want to consult details documentation.</p>"},{"location":"template/configuration/basic/#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>Most adjustments are made in <code>pyproject.toml</code>, which controls:</p> <ul> <li>Developer Dependencies \u2013 Managed in <code>[dependency-groups]</code>     (each dependency prefixed by <code>dev</code>).</li> <li>Tool Settings \u2013 Configures tools like     <code>ruff</code>\u00a0\u29c9     section <code>[tool.&lt;name-of-tool&gt;]</code>.</li> <li>Developer Commands \u2013 Defined under <code>[tool.pdm.scripts]</code>     (usually <code>check-&lt;type&gt;</code> or <code>fix-&lt;type&gt;</code>).</li> </ul> <p>Note</p> <p>Sections are ordered by importance and assumed frequency of change.</p>"},{"location":"template/configuration/basic/#pre-commit","title":"<code>pre-commit</code>","text":"<p>Some tools not integrated with <code>pyproject.toml</code> can be configured by editing <code>.pre-commit-config.yaml</code>.</p> <p>Tip</p> <p>Non-<code>pyproject.toml</code> configurations are at the beginning of the file.</p> <p>More details: pre-commit documentation\u00a0\u29c9</p>"},{"location":"template/configuration/basic/#github-actions","title":"GitHub Actions","text":"<p><code>opentemplate</code> minimizes manual GitHub Actions configuration, allowing modifications through <code>pyproject.toml</code>.</p> <p>To add or edit actions, edit files in <code>.github/workflows/</code> folder.</p> <p>Tip</p> <p>See GitHub Actions Guide for more information.</p>"},{"location":"template/configuration/basic/#other-adjustments","title":"Other adjustments","text":"<p>For other modifications, check:</p> <ul> <li>Relevant documentation sections (mostly details documentation).</li> <li>FAQ for general questions.</li> <li>Tips and Tricks</li> </ul> <p>Important</p> <p>Need Help? Search the docs for specific files or directories. If you can\u2019t find what you need, please open an issue\u00a0\u29c9.</p>"},{"location":"template/configuration/basic/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>.github/workflows/</code></li> </ul>"},{"location":"template/details/","title":"Details","text":"<p>This section covers specific parts of <code>opentemplate</code> in-depth; how they work and how to adjust them if needed.</p> <p>Caution</p> <p>You don\u2019t need to read this to use <code>opentemplate</code>, but a quick skim can be helpful.</p> <p>Explore the topics:</p> <ul> <li>Security \u2013 security measures and policies provided by <code>opentemplate</code></li> <li>Tests \u2013 how Python testing is managed</li> <li>Python \u2013 linters and quality checks</li> <li>Documentation \u2013 building and validating docs</li> <li>GitHub Actions \u2013 CI setup and workflows</li> <li>Scheduled jobs \u2013 automated updates and security checks</li> <li>Legal \u2013 licensing and copyright via REUSE\u00a0\u29c9</li> <li>Prose \u2013 checks for docstrings, markdown etc.</li> <li>Other languages \u2013 QA for bash, JSON, etc.</li> </ul>"},{"location":"template/details/documentation/","title":"Documentation","text":"<p>This guide outlines the documentation features included in the <code>opentemplate</code> template and available for your Python package.</p>"},{"location":"template/details/documentation/#features","title":"Features","text":"<p>The template uses <code>mkdocs</code>\u00a0\u29c9 with various plugins for enhanced functionality:</p> <ul> <li>Single source of truth \u2013 Both GitHub and <code>mkdocs</code> share the same     markdown files (adjustable in <code>mkdocs.yml</code> and via content generation).</li> <li>Automated Docs \u2013 Generates documentation from     <code>docstrings</code> and <code>/docs</code> using     <code>mkdocstrings</code>\u00a0\u29c9.</li> <li>Modern Design \u2013 Uses <code>mkdocs-material</code>\u00a0\u29c9     for a polished look.</li> <li>Auto Navigation \u2013 <code>mkdocs-awesome-pages-plugin</code>\u00a0\u29c9     builds the navigation structure.</li> <li>Predefined Sections \u2013 <code>docs</code> includes structured folders     (only visible in generated documentation if populated).</li> <li>Versioning Support \u2013 <code>mike</code>\u00a0\u29c9     manages documentation versions.</li> <li>GitHub Alerts \u2013 Use GitHub Alerts\u00a0\u29c9     to emphasize information (works in generated docs and docstrings!).</li> </ul> <p>Tip</p> <p>See <code>mkdocs.yml</code> for a full list of features.</p>"},{"location":"template/details/documentation/#checks-and-fixers","title":"Checks and fixers","text":"<ul> <li>Uses the same checks as in     Prose (excluding auto-generated docstrings).</li> <li>Runs a documentation build as a smoke test during commits.</li> <li>Ensures <code>docstrings</code> coverage via     <code>interrogate</code>\u00a0\u29c9 (default: 100%).</li> <li>Detects common misspellings using     <code>codespell</code>\u00a0\u29c9.</li> </ul> <p>Important</p> <p>Always review generated documentation manually before pushing changes.</p>"},{"location":"template/details/documentation/#writing-docstrings","title":"Writing docstrings","text":"<ul> <li>Document every function, class, and module in your package.</li> <li>Follow Google docstring style\u00a0\u29c9     for consistency.</li> <li>Use <code>&lt;!--\u2007mkdocs remove start --&gt;</code> and <code>&lt;!--\u2007mkdocs remove end --&gt;</code>     to exclude content from <code>mkdocs</code> (e.g. GitHub-only notes).</li> <li>You can use absolute paths in the links, just like on GitHub,     for example <code>/docs/README.md</code> will be transformed to <code>mkdocs</code>-compatible     <code>../README.md</code> if the link was specified in file <code>/docs/tutorials/foo.md</code>.</li> </ul>"},{"location":"template/details/documentation/#adjustments","title":"Adjustments","text":"<p>Common places to change documentation settings:</p> <ul> <li><code>pyproject.toml</code> \u2013 Configure plugins and tools in     <code>[dependency-groups]</code> (<code>dev-docs</code>).</li> <li><code>mkdocs.yml</code> \u2013 General documentation settings.</li> <li><code>docs/</code> \u2013 Add or modify content (not autogenerated).</li> <li><code>/src</code> docstrings \u2013 For API documentation.</li> <li>Top-level <code>*.md</code> files \u2013 General project documentation     (see <code>nav</code> in <code>mkdocs.yml</code>).</li> </ul> <p>Caution</p> <p><code>README.md</code> in <code>/docs</code> serves as the documentation description, not the project overview.</p>"},{"location":"template/details/documentation/#content-generation","title":"Content generation","text":"<p>There might be cases where you want <code>mkdocs</code> documentation to differ from GitHub files (e.g. lack of support for certain features).</p> <p>In this case, you can wrap the content you want to delete from <code>mkdocs</code> generated representation in <code>&lt;!--\u2007mkdocs remove start --&gt;</code> and <code>&lt;!--\u2007mkdocs remove end --&gt;</code> HTML/markdown comments.</p> <p>Tip</p> <p>Check <code>README.md</code> for an example.</p>"},{"location":"template/details/documentation/#code-sources","title":"Code sources","text":"<ul> <li><code>mkdocs.yml</code></li> <li><code>pyproject.toml</code></li> <li><code>docs/</code></li> <li><code>docs/gen_ref_pages.py</code></li> <li><code>.github/workflows/docs*.yml</code></li> </ul>"},{"location":"template/details/github-actions/","title":"GitHub Actions","text":"<p>GitHub Actions\u00a0\u29c9 are used to run CI/CD pipelines.</p> <p>Important</p> <p>No pipeline modifies the repository contents (e.g. no formatting is done), it only verifies the compliance (e.g. linting) of source code.</p>"},{"location":"template/details/github-actions/#pipelines","title":"Pipelines","text":"<p>Note</p> <p>Configuration is stored in <code>.github</code> directory and <code>.github/workflows</code> specifically</p> <p>Pipelines run approximately the same steps as <code>pre-commit</code> hooks, the specific tooling functionality is located in various other documents such as legal, python, other languages, prose, etc.</p> <p>Features of note include:</p> <ul> <li> <p>each workflow starts with a semantic prefix defining its purpose     (e.g. <code>tests</code>, <code>security</code>, <code>docs</code>)</p> </li> <li> <p>most of the workflows from each semantic group comes in three flavors:</p> <ul> <li><code>&lt;type&gt;.yml</code> - analogous to check/linter of <code>type</code>, done for every push to     the pull request (usually ran only if files of interest where changed     in the pull request, e.g. <code>**.md</code> files for <code>markdown.yml</code></li> <li><code>&lt;type&gt;-renovate.yml</code> - checks run, when <code>renovate[bot]</code> makes an update     to the checkers (e.g. <code>dev-markdown</code> in <code>pyproject.toml</code>'s <code>[dependency-groups]</code>     gets updated, the markdown checks run on all <code>markdown</code> files in the repository).     This allows verification of updates against currently accepted     standards (e.g. no new checks were introduced without feedback)</li> <li><code>&lt;type&gt;-reusable.yml</code> - de facto implementation of the linter,     will be called <code>&lt;type&gt;.yml</code> and <code>&lt;type&gt;-renovate.yml</code></li> </ul> </li> <li> <p><code>*-update.yml</code> workflows are ran periodically, see     scheduled jobs documentation     for more details</p> </li> </ul> <p>Note</p> <p>This structure may not be present in all workflows, as some checks should not be ran on every push or renovate update, in these cases only <code>&lt;type&gt;.yml</code> might be present.</p>"},{"location":"template/details/github-actions/#reusable-workflows","title":"Reusable workflows","text":"<p>Reusable workflows\u00a0\u29c9:</p> <ul> <li>Improve security (as the source code is not modifiable     by the repository owner)</li> <li>Streamline updates from the main template (as the reusable     workflows are updated from the <code>opennudge/opentemplate</code> repository)</li> </ul> <p>You might want to change the reusable workflows to local workflows if you:</p> <ul> <li>want to fully control your pipelines</li> <li>want to host/adjust the pipeline yourself</li> <li>do not want the pipelines to change behavior without your consent</li> </ul> <p>If so, check the configuration section.</p>"},{"location":"template/details/github-actions/#special-workflows","title":"Special workflows","text":"<p>These workflows might be of special interest:</p> <ul> <li><code>check-run-reusable.yml</code> - runs most of the checks     defined in <code>&lt;type&gt;-reusable.yml</code> as a sort of centralized runner</li> <li><code>security-*</code> - ran on PRs and periodically to ensure the security     of the project, see security     section for more details</li> </ul>"},{"location":"template/details/github-actions/#caching","title":"Caching","text":"<p>Centralized caching (create from <code>main</code> branch) is used for all workflows, after PR merge, the cache is updated (if needed) and stored.</p> <p>Note</p> <p>Cache is optimized on a per-workflow basis, each having a minimal set of necessary dependencies.</p> <p>Tip</p> <p>For source code check <code>cache.yml</code></p>"},{"location":"template/details/github-actions/#configuration","title":"Configuration","text":"<p>Important</p> <p>Many of the features can be controlled via <code>pyproject.toml</code> as described in configuration section.</p>"},{"location":"template/details/github-actions/#changing-workflows-reusability","title":"Changing workflows reusability","text":"<p>Scripts provided in <code>.github/workflows/reusability</code>:</p> <ul> <li><code>localize.sh</code> - changes the reusable workflows     (pointing to <code>opennudge/opentemplate</code>) to local workflows</li> <li><code>globalize.sh</code> - changes the local workflows to reusable workflows     (pointing to <code>opennudge/opentemplate</code>)</li> </ul> <p>Run <code>./reusability/localize.sh</code> or <code>./reusability/globalize.sh</code> to apply the changes. The script also allows you to specify the directory where the changes should be applied as an argument.</p> <p>Caution</p> <p>While <code>localize.sh</code> is safe to run, <code>globalize.sh</code> should be used with caution, as it may incorrectly <code>globalize</code> local workflows/actions you have added on top of the template provided functionality.</p> <p>Warning</p> <p><code>release-package-reusable.yml</code> and <code>release-package-upload-reusable.yml</code> used by <code>release.yml</code> should not be globalized as they are attested uploads to PyPI do not yet support reusable workflows (see this GitHub issue\u00a0\u29c9).</p>"},{"location":"template/details/github-actions/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/*.yml</code></li> <li><code>.github/actions/*/action.yml</code></li> </ul>"},{"location":"template/details/legal/","title":"Legal","text":"<p>Caution</p> <p>This document is not a legal advice. Consult a professional for legal questions.</p> <p>This document outlines the legal aspects of <code>opentemplate</code>.</p>"},{"location":"template/details/legal/#compliance-and-fixes","title":"Compliance and fixes","text":""},{"location":"template/details/legal/#reuse-compliance","title":"REUSE compliance","text":"<p>Repositories created from this template follow REUSE\u00a0\u29c9 framework, meaning:</p> <ul> <li>Every file includes an SPDX\u00a0\u29c9     header with <code>license</code> and copyright details.</li> <li>Headers are either language-specific comments or <code>&lt;filename&gt;.license</code>     files when comments aren't supported.</li> </ul> <p>Important</p> <p>Each contributor will be added to the SPDX headers. See <code>SPDX-FileContributor</code>\u00a0\u29c9 for more details.</p> <ul> <li>The <code>pre-commit</code> hook automatically adds missing headers (<code>fix-legal</code> in <code>pyproject.toml</code>).</li> <li><code>check-legal</code> in <code>pyproject.toml</code> ensures compliance and runs after <code>fix-legal</code>.</li> </ul>"},{"location":"template/details/legal/#license-compliance","title":"License compliance","text":"<p><code>google/osv-scanner</code>\u00a0\u29c9 checks dependency licenses. Allowed licenses (subject to change):</p> <p>MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, Unlicense, Zlib, OFL-1.1, 0BSD, PSF-2.0</p>"},{"location":"template/details/legal/#adjustments","title":"Adjustments","text":""},{"location":"template/details/legal/#changing-license","title":"Changing license","text":"<ul> <li>Run <code>pdm run reuse download &lt;LICENSE-SPDX&gt;</code> and link the <code>/LICENSE.md</code> file     to appropriate file in <code>licenses/</code>.</li> <li>Change <code>license</code> in <code>pyproject.toml</code> to the new SPDX identifier.</li> </ul>"},{"location":"template/details/legal/#modifying-license-compliance","title":"Modifying license compliance","text":"<p>Important</p> <p>Adjust project licensing as needed.</p> <p>To update allowed licenses for <code>osv-scanner</code>:</p> <ul> <li>Modify <code>.pre-commit-config.yaml</code> (<code>id: osv-scanner</code>) for local changes.</li> <li>Update <code>.github/workflows/reusable-security-osv-scanner.yml</code> for CI.</li> </ul>"},{"location":"template/details/legal/#documents","title":"Documents","text":"<ul> <li><code>/LICENSE.md</code> (Apache-2.0 by default)     should be a symbolic link to the actual license file in <code>licenses/</code>.</li> <li><code>LICENSES/</code> folder contains all project licenses     (e.g., <code>pdm.lock</code> is <code>CC0-1.0</code>\u00a0\u29c9).</li> <li><code>CODE_OF_CONDUCT.md</code> follows the     Contributor Covenant\u00a0\u29c9.</li> <li><code>DCO.md</code> (Developer Certificate of Origin) must remain unchanged;     all commits must be signed off (details\u00a0\u29c9).</li> <li><code>GOVERNANCE.md</code> outlines project governance.</li> <li><code>CITATION.cff</code> provides citation details</li> </ul> <p>Tip</p> <p>See GitHub guide\u00a0\u29c9 for more information.</p>"},{"location":"template/details/legal/#code-sources","title":"Code Sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/legal*.yml</code></li> </ul>"},{"location":"template/details/other-languages/","title":"Other languages","text":"<p>Important</p> <p>Although these checks are about other languages, the tooling is largely Python-based, and the configuration is in the <code>pyproject.toml</code></p> <p>Except Python a few other \"complementary\" languages (mostly markup) are verified by both <code>pre-commit</code> and CI pipelines, namely:</p> <ul> <li>Generic text checks - <code>codespell</code>\u00a0\u29c9     verifies spelling and compliance with <code>editorconfig</code>\u00a0\u29c9     is checked by     <code>editorconfig-checker</code>\u00a0\u29c9.     Additionally <code>opentemplate</code> looks for merge conflict strings and whether     scripts with <code>shebang</code> (<code>#</code>) is executable</li> <li><code>yaml</code> - responsible for GitHub Actions workflows, <code>mkdocs.yml</code>,     <code>.pre-commit-config.yaml</code>, performed by     adrienverge/yamllint\u00a0\u29c9</li> <li><code>pyproject.toml</code> - responsible for Python project configuration,     validated by abravalheri/validate-pyproject\u00a0\u29c9</li> <li><code>json</code> - responsible mainly for <code>renovate.json</code>, performed by     pre-commit/pre-commit-hooks\u00a0\u29c9</li> <li><code>toml</code> - basic syntax correctness checks</li> <li><code>ini</code> responsible for <code>.editorconfig</code> and <code>.vale.ini</code>,     performed by danieljrmay/pyinilint\u00a0\u29c9</li> <li><code>markdown</code> - any <code>markdown</code> files, see prose for more information)</li> <li><code>CITATION.cff</code> - checked by     citation-file-format/cffconvert\u00a0\u29c9</li> </ul> <p>As with other commands, they have <code>check-&lt;language&gt;</code> and (if available) <code>fix-&lt;language&gt;</code> variants and follow standard procedure as outlined in the configuration section.</p>"},{"location":"template/details/other-languages/#code-sources","title":"Code Sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>.github/workflows/&lt;language&gt;*.yml</code></li> </ul>"},{"location":"template/details/prose/","title":"Prose","text":"<p>This document covers non-code aspects of <code>opentemplate</code>, including prose checks, documentation, and related files.</p>"},{"location":"template/details/prose/#checks-and-fixes","title":"Checks and Fixes","text":""},{"location":"template/details/prose/#markdown","title":"Markdown","text":"<p>Markdown is the primary format for project documentation. The following tools ensure consistency and quality:</p> <ul> <li>Formatting: <code>mdformat</code>\u00a0\u29c9</li> <li>Linting: <code>pymarkdownlnt</code>\u00a0\u29c9     (similar to <code>markdownlint</code>\u00a0\u29c9)</li> <li>Dead link checking: <code>md-dead-link-check</code>\u00a0\u29c9</li> </ul>"},{"location":"template/details/prose/#vale","title":"<code>vale</code>","text":"<p><code>vale</code>\u00a0\u29c9 checks writing style and grammar. <code>pre-commit</code> and GitHub Actions run it on any text files (internet access is required).</p> <p>Tip</p> <p>To exclude specific checks, update <code>.vale.ini</code> instead of <code>pyproject.toml</code>. See Vale's documentation\u00a0\u29c9 for details.</p> <p>Caution</p> <p>Many of the findings of type <code>suggestion</code> and <code>warning</code> will be false positives. Use your judgment when addressing them.</p>"},{"location":"template/details/prose/#documentation-files","title":"Documentation Files","text":"<ul> <li><code>ROADMAP.md</code> \u2013 Planned features and changes.     Update before each release or remove.</li> <li><code>ADOPTERS.md</code> \u2013 List of project adopters, categorized.</li> <li><code>ANNOUNCEMENTS.md</code> \u2013 Updates on releases, discussions, and other project news.</li> <li><code>CONTRIBUTING.md</code> \u2013 Guidelines for contributing.</li> <li><code>SUPPORT.md</code> \u2013 Support channels and Code of Conduct information.</li> </ul>"},{"location":"template/details/prose/#code-sources","title":"Code Sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>.github/workflows/prose.yml</code></li> </ul>"},{"location":"template/details/python/","title":"Python","text":"<p>Important</p> <p>For testing details, see the tests documentation.</p> <p>As the project's core language, <code>Python</code> undergoes the most extensive linting.</p>"},{"location":"template/details/python/#checks-and-fixes","title":"Checks and fixes","text":"<p>The following tools are used, in order:</p> <ul> <li>Code formatting and linting: <code>ruff</code>\u00a0\u29c9     (all checks enabled by default)</li> <li>Type checking: <code>basedpyright</code>\u00a0\u29c9     (run as a separate <code>typing</code> step)</li> <li>Docstring coverage: <code>interrogate</code>\u00a0\u29c9     (checks all functions, classes, and modules, including private ones)</li> <li>Static dependency analysis: <code>FawltyDeps</code>\u00a0\u29c9     (may produce false positives; see Adjustments)</li> </ul>"},{"location":"template/details/python/#adjustments","title":"Adjustments","text":"<p>You can configure most of the settings in <code>pyproject.toml</code> (see Configuration), for example:</p> <ul> <li>Lower docstring coverage threshold: Adjust <code>fail-under</code>     in <code>[tool.interrogate]</code>.</li> <li>Handle false positives in <code>FawltyDeps</code>: Add dependencies to     <code>ignore_undeclared</code>, <code>ignore_undefined</code> or <code>ignore_unused</code> under     <code>[tool.fawltydeps]</code> (ensure correctness before ignoring).</li> </ul>"},{"location":"template/details/python/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/python*.yml</code></li> </ul>"},{"location":"template/details/scheduled-jobs/","title":"Scheduled jobs","text":"<p><code>opentemplate</code> runs scheduled jobs weekly, typically on weekends.</p> <p>Tip</p> <p>All cron-like jobs are in <code>/.github/workflows</code> and use the <code>on: schedule</code> trigger.</p>"},{"location":"template/details/scheduled-jobs/#jobs","title":"Jobs","text":"<p>Most scheduled jobs focus on security (<code>security-_</code> workflows) and are run periodically as vulnerabilities evolve, namely:</p> <ul> <li>Security posture analysis: <code>ossf/scorecard</code>\u00a0\u29c9</li> <li>Vulnerability scanning: <code>google/osv-scanner</code>\u00a0\u29c9</li> <li>Bug detection and code quality: <code>semgrep/semgrep</code>\u00a0\u29c9</li> </ul>"},{"location":"template/details/scheduled-jobs/#dependency-automation","title":"Dependency automation","text":"<p>Automating dependency updates ensures security and stability.</p>"},{"location":"template/details/scheduled-jobs/#renovate","title":"Renovate","text":"<p>Important</p> <p>Only relevant workflows run when <code>renovate</code> opens a PR (e.g., <code>markdown</code> checks for <code>dev-markdown</code> updates).</p> <ul> <li>Updates run on weekends.</li> <li>Dependencies are grouped by <code>dev-&lt;type&gt;</code>.</li> <li>Updates are handled by <code>github-actions[bot]</code>.</li> </ul>"},{"location":"template/details/scheduled-jobs/#adjustments","title":"Adjustments","text":"<p>Caution</p> <p>If adding a <code>dev</code> dependency in <code>pyproject.toml</code>, update <code>.github/renovate.json</code> accordingly.</p> <p>New <code>dev-&lt;type&gt;</code> groups require:</p> <ul> <li>A corresponding entry in <code>renovate.json</code>.</li> <li>(Probably) a new <code>.github/workflows/renovate-&lt;type&gt;.yml</code> workflow.</li> </ul> <p>Note</p> <p><code>.github/workflows/&lt;type&gt;-renovate.yml</code> should run only when the branch name matches <code>dependencies-dev-&lt;type&gt;</code>.</p> <p>Tip</p> <p>See the GitHub Actions section for more details.</p>"},{"location":"template/details/scheduled-jobs/#pre-commit","title":"pre-commit","text":"<p>Independent <code>pre-commit</code> hooks update weekly. All hooks run against the latest <code>main</code> branch state to ensure updates are correct.</p> <p>Note</p> <p><code>renovate</code> does not update <code>pre-commit</code> hooks due to maintainers' policy (details\u00a0\u29c9).</p>"},{"location":"template/details/scheduled-jobs/#content-generation","title":"Content generation","text":"<p><code>cog</code>\u00a0\u29c9 automates content generation based on source code comments (<code>DO NOT EDIT UNTIL end marker</code> in <code>pyproject.toml</code>).</p> <p>Additionally, <code>opennudge/cogeol</code>\u00a0\u29c9 integrates Python's end-of-life\u00a0\u29c9 data to simplify management.</p> <p>Together with GitHub Actions, these ensure:</p> <ul> <li>Support for the latest three Python versions.</li> <li>CI/CD always runs appropriate versions.</li> <li>PRs are opened for new releases and scheduled deprecations.</li> </ul>"},{"location":"template/details/scheduled-jobs/#template-updates","title":"Template updates","text":"<p>Note</p> <p>Template updates are not currently automated; the workflow is a placeholder for future use.</p>"},{"location":"template/details/scheduled-jobs/#code-sources","title":"Code sources","text":"<ul> <li><code>.github/renovate.json</code></li> <li><code>.github/workflows/pre-commit-update*.yml</code></li> <li><code>.github/workflows/security-osv-scanner-update*.yml</code></li> <li><code>.github/workflows/security-semgrep*.yml</code></li> <li><code>.github/workflows/*-renovate.yml</code></li> <li><code>.github/workflows/generation*.yml</code></li> </ul>"},{"location":"template/details/security/","title":"Security","text":"<p>This document outlines security practices in the template.</p> <p>Note</p> <p>See installation/hardening for additional security measures.</p>"},{"location":"template/details/security/#checks","title":"Checks","text":"<p>Key security checks include:</p> <ul> <li> <p>Commit validation: Enforced signature and DCO sign-off     (<code>siderolabs/conform</code>\u00a0\u29c9)</p> </li> <li> <p>Branch protection: No direct commits to <code>main</code>     (<code>pre-commit/pre-commit-hooks</code>\u00a0\u29c9)</p> </li> <li> <p>Vulnerability scanning: <code>google/osv-scanner</code>\u00a0\u29c9</p> </li> <li> <p>Secret scanning: <code>trufflesecurity/trufflehog</code>\u00a0\u29c9</p> </li> <li> <p>Language-specific security checks:</p> <ul> <li><code>zizmor</code>\u00a0\u29c9 for GitHub Actions security</li> <li><code>semgrep/semgrep</code>\u00a0\u29c9 for Python/general</li> </ul> </li> <li> <p>Pinned dependencies: OSSF Scorecard\u00a0\u29c9</p> </li> </ul> <p>Important</p> <p>These checks run both locally (<code>pre-commit</code>) and in CI/CD.</p> <p>Tip</p> <p>Configuration is primarily in <code>pyproject.toml</code> and <code>.pre-commit-config.yaml</code>, with a few additional settings in <code>.github/workflows</code>.</p>"},{"location":"template/details/security/#github-actions","title":"GitHub Actions","text":"<p>Important</p> <p>See GitHub Actions section for details.</p> <p>Security measures:</p> <ul> <li>Automated dependency updates: <code>renovatebot/renovate</code>\u00a0\u29c9</li> <li>Minimal permissions for GitHub Actions</li> <li>Software Bill of Materials (SBOMs): Generated, stored, and attested in releases</li> <li>Reusable workflows for key tasks (e.g., <code>release</code>, <code>test</code>) to minimize     misconfiguration risks     (more info\u00a0\u29c9)</li> <li>Egress monitoring: <code>stepsecurity/harden-runner</code>\u00a0\u29c9</li> <li>Static analysis: <code>actionlint</code>\u00a0\u29c9</li> </ul> <p>Important</p> <p>Security checks (e.g., <code>scorecard</code>) run weekly.</p>"},{"location":"template/details/security/#security-documents","title":"Security documents","text":"<p>Tip</p> <p>Review these documents and adapt them to your project.</p> <p>Following Open Source Security Foundation best practices\u00a0\u29c9:</p> <ul> <li>Security policy: <code>SECURITY.md</code>\u00a0\u29c9</li> <li>Machine-readable security insights: <code>SECURITY-INSIGHTS.yml</code>\u00a0\u29c9</li> <li>Third-party dependency policy: <code>SECURITY-DEPENDENCY.md</code></li> <li>Self-assessment report: <code>SECURITY-SELF-ASSESSMENT.md</code>     per CNCF guidelines\u00a0\u29c9</li> <li>Changelog: <code>CHANGELOG.md</code> linking to     GitHub releases (FAQ)</li> </ul> <p>Important</p> <p>See the full OpenSSF Scorecard checklist\u00a0\u29c9.</p>"},{"location":"template/details/security/#adjustments","title":"Adjustments","text":"<p>Most security configurations (e.g., <code>check-security</code>, <code>check-workflow</code>) are in <code>pyproject.toml</code>. Additional security workflows are in <code>.github/workflows</code> (prefix: <code>security-</code>).</p>"},{"location":"template/details/security/#osv-scanner","title":"OSV Scanner","text":"<p>To ignore specific vulnerabilities, modify <code>osv-scanner.toml</code> (docs\u00a0\u29c9).</p> <p>Warning</p> <p>License-related issues in currently defined development dependencies are ignored by default.</p> <p>Tip</p> <p><code>osv-scanner.toml</code> settings are respected by OSSF Scorecard.</p>"},{"location":"template/details/security/#conform","title":"Conform","text":"<p><code>siderolabs/conform</code>\u00a0\u29c9 enforces DCO sign-off and GPG signatures. Modify <code>.conform.yml</code> to adjust checks.</p>"},{"location":"template/details/security/#additional-resources","title":"Additional resources","text":"<ul> <li>Threat Modeling Manifesto\u00a0\u29c9</li> <li>CNCF Tag Security\u00a0\u29c9</li> <li>AppSec Tools\u00a0\u29c9</li> </ul>"},{"location":"template/details/tests/","title":"Tests","text":"<p>This document outlines the testing process of <code>opentemplate</code>-based projects.</p>"},{"location":"template/details/tests/#features","title":"Features","text":"<ul> <li>Uses <code>pytest</code>\u00a0\u29c9 for testing.</li> <li>Measures test coverage with <code>pytest-cov</code>\u00a0\u29c9     (default threshold: <code>100%</code>).</li> <li>Local testing: Runs on the latest three Python versions,     following SPEC 0\u00a0\u29c9.</li> <li>CI testing: Runs across multiple Python versions and     OSs (Linux, macOS, Windows) via GitHub Actions.</li> <li>Randomized test execution ensures independence.</li> <li>Includes <code>Hypothesis</code>\u00a0\u29c9     for property-based testing.</li> </ul> <p>Note</p> <p><code>tox</code> is not used; instead, tests are run with different interpreters locally and across CI runners.</p>"},{"location":"template/details/tests/#writing-tests","title":"Writing tests","text":"<ul> <li>All tests are in the <code>tests</code> directory, named <code>test_.py</code>.</li> <li>Tests should follow <code>pytest</code> style.</li> <li>Recommended: Use <code>Hypothesis</code>\u00a0\u29c9     for property-based testing, as required     by OSSF Scorecard\u00a0\u29c9.</li> </ul> <p>Tip</p> <p><code>opentemplate</code> does not enforce a specific testing style, but methodologies like Test/Behavior Driven Development may be beneficial.</p>"},{"location":"template/details/tests/#checks-and-fixes","title":"Checks and fixes","text":"<p>Tests should be documented, formatted, and typed as they will be checked like regular source code.</p> <p>Tip</p> <p>See the Python section for more information.</p>"},{"location":"template/details/tests/#adjustments","title":"Adjustments","text":"<p>Note</p> <p>All changes apply to the CI as well.</p> <ul> <li>To change coverage requirements, update the <code>fail_under</code>     flag in <code>[tool.coverage.reports]</code> section in <code>pyproject.toml</code></li> <li>To change the test runner, update the <code>tests</code> script in     the <code>pyproject.toml</code> file.</li> </ul>"},{"location":"template/details/tests/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/tests*.yml</code></li> <li><code>.github/workflows/typing*.yml</code></li> </ul>"},{"location":"template/quickstart/","title":"Quick start","text":"<p><code>opentemplate</code> works like a typical Python project but adds automation and best practices behind the scenes.</p> <p>To get started:</p> <ul> <li>Installation \u2013 one-click setup</li> <li>Usage \u2013 daily workflow with <code>opennudge</code></li> </ul>"},{"location":"template/quickstart/installation/","title":"Installation","text":""},{"location":"template/quickstart/installation/#prerequisites","title":"Prerequisites","text":"<p>Before starting, install the following on your local machine:</p> <ol> <li>Python\u00a0\u29c9 (latest version recommended).</li> <li><code>pdm</code>\u00a0\u29c9     package manager.</li> </ol> <p>Note</p> <p>Learn more about <code>pdm</code> in the pdm documentation\u00a0\u29c9</p>"},{"location":"template/quickstart/installation/#setup","title":"Setup","text":"<ol> <li>Create a new GitHub repository using this template (<code>Use this template</code> button).</li> <li>Name your repo (use underscores <code>_</code> instead of hyphens <code>-</code>).</li> <li>Add a project description (required!).</li> <li>Wait for the setup commit (done by <code>github-actions[bot]</code>, may take a few minutes).</li> </ol> <p>Once complete, clone the repository and run <code>pdm setup</code> to install dependencies and set up the project.</p>"},{"location":"template/quickstart/installation/#effects","title":"Effects","text":"<p>The following features (and more) will be enabled:</p> <ul> <li>Ready-to-use state of the art project structure</li> <li>Set of <code>20+</code> labels (see here\u00a0\u29c9),     many of which are automatically applied to pull requests</li> <li>Predefined templates for issues, pull requests and discussions</li> <li>Initial dependency-specific caching enabled in GitHub Actions</li> </ul>"},{"location":"template/quickstart/installation/#hardening","title":"Hardening","text":"<p>After the setup, an issue will be created (named <code>Update repository settings</code>) outlining security hardening steps.</p> <p>Caution</p> <p>Following these steps is strongly recommended for better security.</p>"},{"location":"template/quickstart/installation/#hardening-steps","title":"Hardening steps","text":"<p>Tip</p> <p>These steps will be further detailed in the aforementioned issue.</p> <ul> <li>Enable third-party bots (if applicable).</li> <li>Create a short-lived, minimally scoped <code>TEMPLATE_GITHUB_TOKEN</code>.</li> <li>Run the hardening workflow.</li> <li>Set up trusted PyPI publishing\u00a0\u29c9.</li> </ul> <p>Note</p> <p>Full automation is not currently possible due to platform limitations.</p>"},{"location":"template/quickstart/installation/#benefits","title":"Benefits","text":"<ul> <li>Improved security following     Open Source Security Foundation's Scorecard best practices\u00a0\u29c9.</li> <li>Enabled GitHub Pages for documentation hosting.</li> <li>Applied GitHub rulesets\u00a0\u29c9     (including branch protection rules\u00a0\u29c9).</li> <li>Configured pull request defaults and other repository settings.</li> <li>Activated GitHub security features (e.g., private vulnerability reporting\u00a0\u29c9).</li> </ul> <p>Warning</p> <p>Exact features depend on repository type, but in general: <code>public</code> &gt; <code>enterprise</code> &gt; <code>private</code>.</p>"},{"location":"template/quickstart/installation/#updates","title":"Updates","text":"<p>Caution</p> <p>This feature is not yet implemented.</p> <p>Your repository will be automatically updated with the latest <code>opentemplate</code> version every weekend.</p>"},{"location":"template/quickstart/installation/#code-sources","title":"Code sources","text":"<ul> <li><code>/.github/workflows/template_setup.yml</code></li> <li><code>/.github/workflows/template_update.yml</code></li> <li><code>/.github/workflows/harden.yml</code></li> <li><code>/.github/rulesets</code></li> </ul>"},{"location":"template/quickstart/usage/","title":"Usage","text":""},{"location":"template/quickstart/usage/#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <p>Follow the installation instructions before proceeding.</p>"},{"location":"template/quickstart/usage/#overview","title":"Overview","text":"<ol> <li>Create an issue for the task.</li> <li>Create a new branch (<code>&lt;issue-number&gt;</code> or similar).</li> <li>(Optional) Add dependencies to <code>pyproject.toml</code>.</li> <li>Write code in <code>/src/&lt;project_name&gt;</code> and tests in <code>/tests</code>.</li> <li>Use <code>git add</code>, <code>git commit</code> (following semver\u00a0\u29c9),     and <code>git push</code>.</li> <li><code>pre-commit</code> will guide you through the process.</li> <li>Create a pull request (following semver\u00a0\u29c9).</li> <li>Wait for CI checks and code review approval.</li> </ol> <p>Tip</p> <p>See CONTRIBUTING.md for details.</p>"},{"location":"template/quickstart/usage/#git-workflow","title":"Git workflow","text":"<p><code>opentemplate</code> follows an extended GitHub Flow\u00a0\u29c9:</p> <ol> <li>Create or pick up an issue (task tracker).</li> <li>Create a branch (<code>&lt;issue-number&gt;</code> or similar) to track changes.</li> <li>Push your changes to the remote repository.</li> <li>Open a pull request (PR title should follow semver\u00a0\u29c9,     e.g., <code>feat: add feature</code>, <code>fix: bugfix</code>).</li> </ol> <p>The <code>main</code> branch is protected and should always be in a releasable state.</p> <p>Note</p> <p>If a PR has a few commits, its type should match the most significant one (<code>feat!</code> &gt; <code>fix!</code> &gt; <code>feat</code> &gt; <code>fix</code>).</p> <p>Tip</p> <p>The <code>GitHub CLI</code>\u00a0\u29c9 simplifies this process. A future extension will streamline it further.</p>"},{"location":"template/quickstart/usage/#programming","title":"Programming","text":""},{"location":"template/quickstart/usage/#source-code","title":"Source code","text":"<p>Place project source code in <code>src/&lt;project_name&gt;</code> or at least <code>src</code> (e.g., <code>src/infrastructure</code>). Some exceptions apply (e.g., <code>Dockerfile</code>, <code>Makefile</code>).</p> <p>Note</p> <p>Before every commit and push <code>pre-commit</code> will run checks ensuring code quality and style.</p>"},{"location":"template/quickstart/usage/#tests","title":"Tests","text":"<p>Tests should be in <code>/tests</code>. The default framework is <code>pytest</code>, but you can change it in <code>dev-test</code> section inside <code>pyproject.toml</code>.</p> <p>Key considerations:</p> <ul> <li><code>100%</code> test coverage is the default (recommended).</li> <li>Fuzzing is encouraged (OSSF Scorecard\u00a0\u29c9);     <code>hypothesis</code>\u00a0\u29c9 is included     by default.</li> </ul> <p>Note</p> <p><code>opentemplate</code> does not enforce a specific testing methodology (e.g., TDD, BDD).</p>"},{"location":"template/quickstart/usage/#commits","title":"Commits","text":"<p><code>opentemplate</code> follows simplified semver\u00a0\u29c9:</p> <ul> <li>Allowed types: <code>fix</code>, <code>feat</code>, <code>BREAKING CHANGE</code>.</li> <li>No scopes (e.g., <code>feat(actions): ...</code> is incorrect).</li> </ul> <p>Commits should be:</p> <ul> <li><code>Signed-off</code> (agreeing to the Developer Certificate of Origin\u00a0\u29c9).</li> <li>Signed via GPG, SSH, S/MIME, or <code>gitsign</code>\u00a0\u29c9     (learn more\u00a0\u29c9).</li> </ul>"},{"location":"template/quickstart/usage/#pull-requests","title":"Pull requests","text":"<p>Pull request type is determined by the most significant type of commit:</p> <ul> <li><code>BREAKING CHANGE</code> &gt; <code>feat</code> &gt; <code>fix</code>.</li> <li>Pull requests will be labeled automatically with scopes (additional labels     may be added manually).</li> </ul> <p>Warning</p> <p>Predefined labels exist; avoid creating new ones unless necessary.</p> <p>Each pull request undergoes CI testing (similar to local tests). Depending on repository type and security settings, up to two reviewers may be required (as defined during installation).</p>"},{"location":"template/quickstart/usage/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>.github/pr-labeler.yml</code></li> <li><code>/.github/workflows/template_setup.yml</code></li> <li><code>.github/workflows/python-tests.yml</code></li> </ul>"},{"location":"template/release-your-project/","title":"Release your project","text":"<p>This section explains how to release a project based on <code>opentemplate</code>.</p> <p>Release when:</p> <ul> <li>You are ready to share the project (publicly or privately).</li> <li>Pipelines and <code>pre-commit</code> checks have passed (tests, security, etc.).</li> </ul> <p>Caution</p> <p>Create a GitHub tag on a release page; everything else is automated.</p> <p>Start here:</p> <ul> <li>Checklist \u2013 steps to complete before release</li> <li>Process \u2013 how the release works</li> </ul>"},{"location":"template/release-your-project/checklist/","title":"Release checklist","text":"<p>Note</p> <p>While automation handles most of the release process, some project-specific details require manual updates.</p>"},{"location":"template/release-your-project/checklist/#readme","title":"README","text":"<ol> <li> <p>Update <code>Features</code> section with ~5 key points.</p> </li> <li> <p>Keep <code>Usage</code> clear and concise.</p> </li> <li> <p>Add <code>__Examples__</code>:</p> <ol> <li> <p>Basic usage</p> </li> <li> <p>Common task</p> </li> <li> <p>Advanced/expert-level usage</p> </li> </ol> </li> </ol> <p>Caution</p> <p>Review README after changes to ensure coherence.</p>"},{"location":"template/release-your-project/checklist/#pyprojecttoml","title":"pyproject.toml","text":"<p>Caution</p> <p>Do not edit sections starting with <code>DO NOT EDIT UNTIL end marker</code> and ending with <code>[[[end]]]</code>.</p> <ul> <li><code>[project.classifiers]</code> \u2013 Add relevant     PyPI classifiers\u00a0\u29c9.</li> <li><code>[project.dependencies]</code> and <code>[project.optional-dependencies]</code> \u2013 Double-check     correctness.</li> </ul> <p>Tip</p> <p>For public projects after the first release, remove <code>exclude_links</code> in <code>[tool.md_dead_link_check]</code> to validate all links.</p>"},{"location":"template/release-your-project/checklist/#documentation","title":"Documentation","text":"<p>Caution</p> <p>Adjust <code>/docs</code> structure and content as needed.</p> <p>You should consult the documentation guide for more details.</p> <p>Note</p> <p>Content in folders like <code>/docs/tutorials</code> is auto-included via <code>mkdocs-awesome-pages</code>\u00a0\u29c9 if any content is present there.</p> <p>Caution</p> <p>Manually validate <code>mkdocs.yml</code> and generated docs.</p>"},{"location":"template/release-your-project/checklist/#security","title":"Security","text":"<ul> <li>Verify and update <code>CODEOWNERS</code>     (docs\u00a0\u29c9).</li> <li>Complete <code>TBD</code> sections in <code>SECURITY-SELF-ASSESSMENT.md</code>     (CNCF guide\u00a0\u29c9).</li> <li>Optional: Add more contact details to <code>SECURITY.md</code>.</li> </ul>"},{"location":"template/release-your-project/checklist/#documents","title":"Documents","text":"<ul> <li>Ensure <code>ROADMAP.md</code> outlines plans for the next release (if applicable).</li> <li>Optional: Add more governance details to <code>GOVERNANCE.md</code>.</li> </ul>"},{"location":"template/release-your-project/process/","title":"Release process","text":"<p>To release a new version, create a GitHub release\u00a0\u29c9. This triggers all necessary pipelines.</p> <p>Note</p> <p>Specify a new tag version and (optionally) release title. Changelog will be automatically updated by the pipelines.</p> <p>Caution</p> <p>You must create GitHub release manually. Merging to <code>main</code> does not trigger package or documentation releases.</p>"},{"location":"template/release-your-project/process/#versioning","title":"Versioning","text":"<p>This project uses a double versioning scheme based on Semantic Versioning\u00a0\u29c9:</p> <ul> <li>Public version \u2013 The official release version (e.g., <code>1.2.0</code>).</li> <li>Python version \u2013 Automatically generated from commits     and independent of the public version.</li> </ul>"},{"location":"template/release-your-project/process/#rationale","title":"Rationale","text":"<p>Public versions are there to signify the release to the audience (mainly for marketing purposes), while the Python version ensures semantic consistency (needed by package users). This approach also enhances security by preventing automated <code>tag</code> pushes to <code>main</code> (no <code>bot</code> automerges).</p>"},{"location":"template/release-your-project/process/#public-version","title":"Public version","text":"<p>Public releases follow Semantic Versioning\u00a0\u29c9 and trigger:</p> <ul> <li>Package release to <code>PyPI</code> (for public repositories, versioned by Python version).</li> <li>Documentation updates.</li> <li>Artifact generation (e.g., Software Bill of Materials\u00a0\u29c9).</li> </ul>"},{"location":"template/release-your-project/process/#python-version","title":"Python version","text":"<p>Managed automatically based on commit messages:</p> <ul> <li><code>fix</code> \u2192 Patch version update</li> <li><code>feat</code> \u2192 Minor version update</li> <li><code>BREAKING</code> (or <code>feat!</code>/<code>fix!</code>) \u2192 Major version update</li> </ul> <p>Tip</p> <p>Check out commition\u00a0\u29c9 for details about Python version calculations.</p>"},{"location":"template/release-your-project/process/#artifacts","title":"Artifacts","text":"<p>Releases include the following artifacts:</p> <ul> <li> <p>Python package (packaging guide\u00a0\u29c9)</p> </li> <li> <p><code>CHANGELOG.md</code> (full changelog)</p> </li> <li> <p><code>LICENSE.md</code> (project license)</p> </li> <li> <p>Documentation (uploaded to <code>gh-pages</code>)</p> </li> <li> <p>OSV-Scanner SARIF\u00a0\u29c9</p> </li> <li> <p>Software Bills of Materials (SBOMs) (CISA guide\u00a0\u29c9):</p> <ol> <li> <p>Python package (via CycloneDX\u00a0\u29c9)</p> </li> <li> <p>Python dependencies (via CycloneDX\u00a0\u29c9)</p> </li> <li> <p>GitHub SBOM (docs\u00a0\u29c9)</p> </li> <li> <p>REUSE SBOM (docs\u00a0\u29c9)</p> </li> </ol> </li> <li> <p>SBOM attestations (actions/attest-sbom\u00a0\u29c9)</p> </li> <li> <p>Python package attestations (PyPI guide\u00a0\u29c9)</p> </li> <li> <p>SLSA Build Provenance (SLSA spec\u00a0\u29c9)</p> </li> </ul> <p>Important</p> <p>Some artifacts depend on repository visibility, the more public the repository, the more artifacts are produced.</p> <p>Note</p> <p>Attestations of Python package SBOMs use hashes of <code>RECORD</code> files as inputs, see here\u00a0\u29c9 for more information about them.</p>"},{"location":"template/release-your-project/process/#repository-visibility-and-compliance","title":"Repository visibility and compliance","text":"Visibility Artifacts produced Compliance level Public All artifacts SLSA Level 3\u00a0\u29c9 Enterprise No provenance, private attestations SLSA Level 3\u00a0\u29c9 Private No attestations, limited artifacts SLSA Level 2\u00a0\u29c9"},{"location":"template/release-your-project/process/#changelog","title":"Changelog","text":"<p>Generated via git-cliff\u00a0\u29c9 (configured in <code>pyproject.toml</code>) and:</p> <ul> <li>The latest version's changelog becomes the release description.</li> <li>Full <code>CHANGELOG.md</code> attached to the release</li> <li><code>CHANGELOG.md</code> inside the repository links to GitHub releases</li> </ul> <p>The changelog includes:</p> <ul> <li>Public version, date, and comparison link</li> <li>Commit statistics (e.g., how many commits done by human vs bots,     types of commit like security, tests, legal etc.)</li> <li>Python changes (Breaking, Features, Fixes, Bots)</li> <li>Other changes (same structure as Python changes)</li> <li>Each commit includes message, author, and metadata (if available)</li> </ul> <p>Tip</p> <p>Read more about changelogs in the FAQ</p>"},{"location":"template/release-your-project/process/#customization","title":"Customization","text":"<p>This process can be adjusted by editing:</p> <ul> <li> <p><code>.github/workflows/release.yml</code></p> </li> <li> <p><code>pyproject.toml</code>:</p> <ol> <li> <p><code>[tool.git-cliff]</code> \u2013 Changelog settings</p> </li> <li> <p><code>[dependency-groups]</code> \u2192 <code>dev-security</code> \u2013 changing SBOM dependencies</p> </li> </ol> </li> </ul> <p>Important</p> <p>Due to pipeline complexity, fine-tuning is more challenging, consult the source files if necessary.</p>"},{"location":"template/release-your-project/process/#code-sources","title":"Code sources","text":"<ul> <li><code>pyproject.toml</code></li> <li><code>.github/workflows/release.yml</code></li> <li><code>.github/workflows/release-upload.yml</code></li> <li><code>.github/workflows/release-sarifs-reusable.yml</code></li> <li><code>.github/workflows/release-sbom-attest-reusable.yml</code></li> <li><code>.github/workflows/release-sbom-run-reusable.yml</code></li> <li><code>.github/workflows/release-sboms-reusable.yml</code></li> <li><code>.github/workflows/release-slsa-provenance-reusable.yml</code></li> </ul>"}]}